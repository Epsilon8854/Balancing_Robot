
Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003f48  08003f48  00013f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08003fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000370  20000020  08003fd8  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000390  08003fd8  00020390  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a70e  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000327b  00000000  00000000  0003a757  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009850  00000000  00000000  0003d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b98  00000000  00000000  00047228  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001158  00000000  00000000  00047dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000079fe  00000000  00000000  00048f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000043a5  00000000  00000000  00050916  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054cbb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002770  00000000  00000000  00054d38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f2c 	.word	0x08003f2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08003f2c 	.word	0x08003f2c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2uiz>:
 80009f4:	004a      	lsls	r2, r1, #1
 80009f6:	d211      	bcs.n	8000a1c <__aeabi_d2uiz+0x28>
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009fc:	d211      	bcs.n	8000a22 <__aeabi_d2uiz+0x2e>
 80009fe:	d50d      	bpl.n	8000a1c <__aeabi_d2uiz+0x28>
 8000a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d40e      	bmi.n	8000a28 <__aeabi_d2uiz+0x34>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_d2uiz+0x3a>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2f>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a3c:	bf24      	itt	cs
 8000a3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a46:	d90d      	bls.n	8000a64 <__aeabi_d2f+0x30>
 8000a48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a5c:	bf08      	it	eq
 8000a5e:	f020 0001 	biceq.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a68:	d121      	bne.n	8000aae <__aeabi_d2f+0x7a>
 8000a6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a6e:	bfbc      	itt	lt
 8000a70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	4770      	bxlt	lr
 8000a76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7e:	f1c2 0218 	rsb	r2, r2, #24
 8000a82:	f1c2 0c20 	rsb	ip, r2, #32
 8000a86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8e:	bf18      	it	ne
 8000a90:	f040 0001 	orrne.w	r0, r0, #1
 8000a94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa0:	ea40 000c 	orr.w	r0, r0, ip
 8000aa4:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aac:	e7cc      	b.n	8000a48 <__aeabi_d2f+0x14>
 8000aae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab2:	d107      	bne.n	8000ac4 <__aeabi_d2f+0x90>
 8000ab4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab8:	bf1e      	ittt	ne
 8000aba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000abe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac2:	4770      	bxne	lr
 8000ac4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000acc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_frsub>:
 8000ad4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ad8:	e002      	b.n	8000ae0 <__addsf3>
 8000ada:	bf00      	nop

08000adc <__aeabi_fsub>:
 8000adc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae0 <__addsf3>:
 8000ae0:	0042      	lsls	r2, r0, #1
 8000ae2:	bf1f      	itttt	ne
 8000ae4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae8:	ea92 0f03 	teqne	r2, r3
 8000aec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af4:	d06a      	beq.n	8000bcc <__addsf3+0xec>
 8000af6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000afe:	bfc1      	itttt	gt
 8000b00:	18d2      	addgt	r2, r2, r3
 8000b02:	4041      	eorgt	r1, r0
 8000b04:	4048      	eorgt	r0, r1
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	bfb8      	it	lt
 8000b0a:	425b      	neglt	r3, r3
 8000b0c:	2b19      	cmp	r3, #25
 8000b0e:	bf88      	it	hi
 8000b10:	4770      	bxhi	lr
 8000b12:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b1e:	bf18      	it	ne
 8000b20:	4240      	negne	r0, r0
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b2e:	bf18      	it	ne
 8000b30:	4249      	negne	r1, r1
 8000b32:	ea92 0f03 	teq	r2, r3
 8000b36:	d03f      	beq.n	8000bb8 <__addsf3+0xd8>
 8000b38:	f1a2 0201 	sub.w	r2, r2, #1
 8000b3c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b40:	eb10 000c 	adds.w	r0, r0, ip
 8000b44:	f1c3 0320 	rsb	r3, r3, #32
 8000b48:	fa01 f103 	lsl.w	r1, r1, r3
 8000b4c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b50:	d502      	bpl.n	8000b58 <__addsf3+0x78>
 8000b52:	4249      	negs	r1, r1
 8000b54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b58:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b5c:	d313      	bcc.n	8000b86 <__addsf3+0xa6>
 8000b5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b62:	d306      	bcc.n	8000b72 <__addsf3+0x92>
 8000b64:	0840      	lsrs	r0, r0, #1
 8000b66:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6a:	f102 0201 	add.w	r2, r2, #1
 8000b6e:	2afe      	cmp	r2, #254	; 0xfe
 8000b70:	d251      	bcs.n	8000c16 <__addsf3+0x136>
 8000b72:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7a:	bf08      	it	eq
 8000b7c:	f020 0001 	biceq.w	r0, r0, #1
 8000b80:	ea40 0003 	orr.w	r0, r0, r3
 8000b84:	4770      	bx	lr
 8000b86:	0049      	lsls	r1, r1, #1
 8000b88:	eb40 0000 	adc.w	r0, r0, r0
 8000b8c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	d1ed      	bne.n	8000b72 <__addsf3+0x92>
 8000b96:	fab0 fc80 	clz	ip, r0
 8000b9a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b9e:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ba6:	bfaa      	itet	ge
 8000ba8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bac:	4252      	neglt	r2, r2
 8000bae:	4318      	orrge	r0, r3
 8000bb0:	bfbc      	itt	lt
 8000bb2:	40d0      	lsrlt	r0, r2
 8000bb4:	4318      	orrlt	r0, r3
 8000bb6:	4770      	bx	lr
 8000bb8:	f092 0f00 	teq	r2, #0
 8000bbc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc0:	bf06      	itte	eq
 8000bc2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bc6:	3201      	addeq	r2, #1
 8000bc8:	3b01      	subne	r3, #1
 8000bca:	e7b5      	b.n	8000b38 <__addsf3+0x58>
 8000bcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd4:	bf18      	it	ne
 8000bd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bda:	d021      	beq.n	8000c20 <__addsf3+0x140>
 8000bdc:	ea92 0f03 	teq	r2, r3
 8000be0:	d004      	beq.n	8000bec <__addsf3+0x10c>
 8000be2:	f092 0f00 	teq	r2, #0
 8000be6:	bf08      	it	eq
 8000be8:	4608      	moveq	r0, r1
 8000bea:	4770      	bx	lr
 8000bec:	ea90 0f01 	teq	r0, r1
 8000bf0:	bf1c      	itt	ne
 8000bf2:	2000      	movne	r0, #0
 8000bf4:	4770      	bxne	lr
 8000bf6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfa:	d104      	bne.n	8000c06 <__addsf3+0x126>
 8000bfc:	0040      	lsls	r0, r0, #1
 8000bfe:	bf28      	it	cs
 8000c00:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	4770      	bx	lr
 8000c06:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0a:	bf3c      	itt	cc
 8000c0c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c10:	4770      	bxcc	lr
 8000c12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c16:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	4770      	bx	lr
 8000c20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c24:	bf16      	itet	ne
 8000c26:	4608      	movne	r0, r1
 8000c28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c2c:	4601      	movne	r1, r0
 8000c2e:	0242      	lsls	r2, r0, #9
 8000c30:	bf06      	itte	eq
 8000c32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c36:	ea90 0f01 	teqeq	r0, r1
 8000c3a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_ui2f>:
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e004      	b.n	8000c50 <__aeabi_i2f+0x8>
 8000c46:	bf00      	nop

08000c48 <__aeabi_i2f>:
 8000c48:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c4c:	bf48      	it	mi
 8000c4e:	4240      	negmi	r0, r0
 8000c50:	ea5f 0c00 	movs.w	ip, r0
 8000c54:	bf08      	it	eq
 8000c56:	4770      	bxeq	lr
 8000c58:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c5c:	4601      	mov	r1, r0
 8000c5e:	f04f 0000 	mov.w	r0, #0
 8000c62:	e01c      	b.n	8000c9e <__aeabi_l2f+0x2a>

08000c64 <__aeabi_ul2f>:
 8000c64:	ea50 0201 	orrs.w	r2, r0, r1
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e00a      	b.n	8000c88 <__aeabi_l2f+0x14>
 8000c72:	bf00      	nop

08000c74 <__aeabi_l2f>:
 8000c74:	ea50 0201 	orrs.w	r2, r0, r1
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c80:	d502      	bpl.n	8000c88 <__aeabi_l2f+0x14>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	ea5f 0c01 	movs.w	ip, r1
 8000c8c:	bf02      	ittt	eq
 8000c8e:	4684      	moveq	ip, r0
 8000c90:	4601      	moveq	r1, r0
 8000c92:	2000      	moveq	r0, #0
 8000c94:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c98:	bf08      	it	eq
 8000c9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca2:	fabc f28c 	clz	r2, ip
 8000ca6:	3a08      	subs	r2, #8
 8000ca8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cac:	db10      	blt.n	8000cd0 <__aeabi_l2f+0x5c>
 8000cae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb8:	f1c2 0220 	rsb	r2, r2, #32
 8000cbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc4:	eb43 0002 	adc.w	r0, r3, r2
 8000cc8:	bf08      	it	eq
 8000cca:	f020 0001 	biceq.w	r0, r0, #1
 8000cce:	4770      	bx	lr
 8000cd0:	f102 0220 	add.w	r2, r2, #32
 8000cd4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_fmul>:
 8000cf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cf8:	bf1e      	ittt	ne
 8000cfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cfe:	ea92 0f0c 	teqne	r2, ip
 8000d02:	ea93 0f0c 	teqne	r3, ip
 8000d06:	d06f      	beq.n	8000de8 <__aeabi_fmul+0xf8>
 8000d08:	441a      	add	r2, r3
 8000d0a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d0e:	0240      	lsls	r0, r0, #9
 8000d10:	bf18      	it	ne
 8000d12:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d16:	d01e      	beq.n	8000d56 <__aeabi_fmul+0x66>
 8000d18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d1c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d20:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d24:	fba0 3101 	umull	r3, r1, r0, r1
 8000d28:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d2c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d30:	bf3e      	ittt	cc
 8000d32:	0049      	lslcc	r1, r1, #1
 8000d34:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d38:	005b      	lslcc	r3, r3, #1
 8000d3a:	ea40 0001 	orr.w	r0, r0, r1
 8000d3e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d42:	2afd      	cmp	r2, #253	; 0xfd
 8000d44:	d81d      	bhi.n	8000d82 <__aeabi_fmul+0x92>
 8000d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	4770      	bx	lr
 8000d56:	f090 0f00 	teq	r0, #0
 8000d5a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d5e:	bf08      	it	eq
 8000d60:	0249      	lsleq	r1, r1, #9
 8000d62:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d66:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6a:	3a7f      	subs	r2, #127	; 0x7f
 8000d6c:	bfc2      	ittt	gt
 8000d6e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d72:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d76:	4770      	bxgt	lr
 8000d78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	dc5d      	bgt.n	8000e40 <__aeabi_fmul+0x150>
 8000d84:	f112 0f19 	cmn.w	r2, #25
 8000d88:	bfdc      	itt	le
 8000d8a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d8e:	4770      	bxle	lr
 8000d90:	f1c2 0200 	rsb	r2, r2, #0
 8000d94:	0041      	lsls	r1, r0, #1
 8000d96:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9a:	f1c2 0220 	rsb	r2, r2, #32
 8000d9e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000da6:	f140 0000 	adc.w	r0, r0, #0
 8000daa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dae:	bf08      	it	eq
 8000db0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db4:	4770      	bx	lr
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dbe:	bf02      	ittt	eq
 8000dc0:	0040      	lsleq	r0, r0, #1
 8000dc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dc6:	3a01      	subeq	r2, #1
 8000dc8:	d0f9      	beq.n	8000dbe <__aeabi_fmul+0xce>
 8000dca:	ea40 000c 	orr.w	r0, r0, ip
 8000dce:	f093 0f00 	teq	r3, #0
 8000dd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0049      	lsleq	r1, r1, #1
 8000dda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dde:	3b01      	subeq	r3, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xe6>
 8000de2:	ea41 010c 	orr.w	r1, r1, ip
 8000de6:	e78f      	b.n	8000d08 <__aeabi_fmul+0x18>
 8000de8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	bf18      	it	ne
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d00a      	beq.n	8000e0e <__aeabi_fmul+0x11e>
 8000df8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dfc:	bf18      	it	ne
 8000dfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	d1d8      	bne.n	8000db6 <__aeabi_fmul+0xc6>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	4770      	bx	lr
 8000e0e:	f090 0f00 	teq	r0, #0
 8000e12:	bf17      	itett	ne
 8000e14:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e18:	4608      	moveq	r0, r1
 8000e1a:	f091 0f00 	teqne	r1, #0
 8000e1e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e22:	d014      	beq.n	8000e4e <__aeabi_fmul+0x15e>
 8000e24:	ea92 0f0c 	teq	r2, ip
 8000e28:	d101      	bne.n	8000e2e <__aeabi_fmul+0x13e>
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	d10f      	bne.n	8000e4e <__aeabi_fmul+0x15e>
 8000e2e:	ea93 0f0c 	teq	r3, ip
 8000e32:	d103      	bne.n	8000e3c <__aeabi_fmul+0x14c>
 8000e34:	024b      	lsls	r3, r1, #9
 8000e36:	bf18      	it	ne
 8000e38:	4608      	movne	r0, r1
 8000e3a:	d108      	bne.n	8000e4e <__aeabi_fmul+0x15e>
 8000e3c:	ea80 0001 	eor.w	r0, r0, r1
 8000e40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e4c:	4770      	bx	lr
 8000e4e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e52:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e56:	4770      	bx	lr

08000e58 <__aeabi_fdiv>:
 8000e58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e60:	bf1e      	ittt	ne
 8000e62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e66:	ea92 0f0c 	teqne	r2, ip
 8000e6a:	ea93 0f0c 	teqne	r3, ip
 8000e6e:	d069      	beq.n	8000f44 <__aeabi_fdiv+0xec>
 8000e70:	eba2 0203 	sub.w	r2, r2, r3
 8000e74:	ea80 0c01 	eor.w	ip, r0, r1
 8000e78:	0249      	lsls	r1, r1, #9
 8000e7a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e7e:	d037      	beq.n	8000ef0 <__aeabi_fdiv+0x98>
 8000e80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e84:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e88:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e90:	428b      	cmp	r3, r1
 8000e92:	bf38      	it	cc
 8000e94:	005b      	lslcc	r3, r3, #1
 8000e96:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	bf24      	itt	cs
 8000ea2:	1a5b      	subcs	r3, r3, r1
 8000ea4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ea8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eb6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eba:	bf24      	itt	cs
 8000ebc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ec8:	bf24      	itt	cs
 8000eca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ece:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	bf18      	it	ne
 8000ed6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eda:	d1e0      	bne.n	8000e9e <__aeabi_fdiv+0x46>
 8000edc:	2afd      	cmp	r2, #253	; 0xfd
 8000ede:	f63f af50 	bhi.w	8000d82 <__aeabi_fmul+0x92>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ee8:	bf08      	it	eq
 8000eea:	f020 0001 	biceq.w	r0, r0, #1
 8000eee:	4770      	bx	lr
 8000ef0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ef8:	327f      	adds	r2, #127	; 0x7f
 8000efa:	bfc2      	ittt	gt
 8000efc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f00:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f04:	4770      	bxgt	lr
 8000f06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	3a01      	subs	r2, #1
 8000f10:	e737      	b.n	8000d82 <__aeabi_fmul+0x92>
 8000f12:	f092 0f00 	teq	r2, #0
 8000f16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1a:	bf02      	ittt	eq
 8000f1c:	0040      	lsleq	r0, r0, #1
 8000f1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f22:	3a01      	subeq	r2, #1
 8000f24:	d0f9      	beq.n	8000f1a <__aeabi_fdiv+0xc2>
 8000f26:	ea40 000c 	orr.w	r0, r0, ip
 8000f2a:	f093 0f00 	teq	r3, #0
 8000f2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0049      	lsleq	r1, r1, #1
 8000f36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3a:	3b01      	subeq	r3, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xda>
 8000f3e:	ea41 010c 	orr.w	r1, r1, ip
 8000f42:	e795      	b.n	8000e70 <__aeabi_fdiv+0x18>
 8000f44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d108      	bne.n	8000f60 <__aeabi_fdiv+0x108>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	f47f af7d 	bne.w	8000e4e <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	f47f af70 	bne.w	8000e3c <__aeabi_fmul+0x14c>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e776      	b.n	8000e4e <__aeabi_fmul+0x15e>
 8000f60:	ea93 0f0c 	teq	r3, ip
 8000f64:	d104      	bne.n	8000f70 <__aeabi_fdiv+0x118>
 8000f66:	024b      	lsls	r3, r1, #9
 8000f68:	f43f af4c 	beq.w	8000e04 <__aeabi_fmul+0x114>
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e76e      	b.n	8000e4e <__aeabi_fmul+0x15e>
 8000f70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f74:	bf18      	it	ne
 8000f76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7a:	d1ca      	bne.n	8000f12 <__aeabi_fdiv+0xba>
 8000f7c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f80:	f47f af5c 	bne.w	8000e3c <__aeabi_fmul+0x14c>
 8000f84:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f88:	f47f af3c 	bne.w	8000e04 <__aeabi_fmul+0x114>
 8000f8c:	e75f      	b.n	8000e4e <__aeabi_fmul+0x15e>
 8000f8e:	bf00      	nop

08000f90 <__gesf2>:
 8000f90:	f04f 3cff 	mov.w	ip, #4294967295
 8000f94:	e006      	b.n	8000fa4 <__cmpsf2+0x4>
 8000f96:	bf00      	nop

08000f98 <__lesf2>:
 8000f98:	f04f 0c01 	mov.w	ip, #1
 8000f9c:	e002      	b.n	8000fa4 <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__cmpsf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb4:	bf18      	it	ne
 8000fb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fba:	d011      	beq.n	8000fe0 <__cmpsf2+0x40>
 8000fbc:	b001      	add	sp, #4
 8000fbe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc2:	bf18      	it	ne
 8000fc4:	ea90 0f01 	teqne	r0, r1
 8000fc8:	bf58      	it	pl
 8000fca:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fce:	bf88      	it	hi
 8000fd0:	17c8      	asrhi	r0, r1, #31
 8000fd2:	bf38      	it	cc
 8000fd4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fd8:	bf18      	it	ne
 8000fda:	f040 0001 	orrne.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe4:	d102      	bne.n	8000fec <__cmpsf2+0x4c>
 8000fe6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fea:	d105      	bne.n	8000ff8 <__cmpsf2+0x58>
 8000fec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff0:	d1e4      	bne.n	8000fbc <__cmpsf2+0x1c>
 8000ff2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ff6:	d0e1      	beq.n	8000fbc <__cmpsf2+0x1c>
 8000ff8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <__aeabi_cfrcmple>:
 8001000:	4684      	mov	ip, r0
 8001002:	4608      	mov	r0, r1
 8001004:	4661      	mov	r1, ip
 8001006:	e7ff      	b.n	8001008 <__aeabi_cfcmpeq>

08001008 <__aeabi_cfcmpeq>:
 8001008:	b50f      	push	{r0, r1, r2, r3, lr}
 800100a:	f7ff ffc9 	bl	8000fa0 <__cmpsf2>
 800100e:	2800      	cmp	r0, #0
 8001010:	bf48      	it	mi
 8001012:	f110 0f00 	cmnmi.w	r0, #0
 8001016:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001018 <__aeabi_fcmpeq>:
 8001018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800101c:	f7ff fff4 	bl	8001008 <__aeabi_cfcmpeq>
 8001020:	bf0c      	ite	eq
 8001022:	2001      	moveq	r0, #1
 8001024:	2000      	movne	r0, #0
 8001026:	f85d fb08 	ldr.w	pc, [sp], #8
 800102a:	bf00      	nop

0800102c <__aeabi_fcmplt>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff ffea 	bl	8001008 <__aeabi_cfcmpeq>
 8001034:	bf34      	ite	cc
 8001036:	2001      	movcc	r0, #1
 8001038:	2000      	movcs	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_fcmple>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffe0 	bl	8001008 <__aeabi_cfcmpeq>
 8001048:	bf94      	ite	ls
 800104a:	2001      	movls	r0, #1
 800104c:	2000      	movhi	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmpge>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffd2 	bl	8001000 <__aeabi_cfrcmple>
 800105c:	bf94      	ite	ls
 800105e:	2001      	movls	r0, #1
 8001060:	2000      	movhi	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmpgt>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffc8 	bl	8001000 <__aeabi_cfrcmple>
 8001070:	bf34      	ite	cc
 8001072:	2001      	movcc	r0, #1
 8001074:	2000      	movcs	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_f2iz>:
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001084:	d30f      	bcc.n	80010a6 <__aeabi_f2iz+0x2a>
 8001086:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108e:	d90d      	bls.n	80010ac <__aeabi_f2iz+0x30>
 8001090:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001098:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800109c:	fa23 f002 	lsr.w	r0, r3, r2
 80010a0:	bf18      	it	ne
 80010a2:	4240      	negne	r0, r0
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr
 80010ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b0:	d101      	bne.n	80010b6 <__aeabi_f2iz+0x3a>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	d105      	bne.n	80010c2 <__aeabi_f2iz+0x46>
 80010b6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ba:	bf08      	it	eq
 80010bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c0:	4770      	bx	lr
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	4770      	bx	lr

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_InitTick+0x3c>)
{
 80010cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ce:	7818      	ldrb	r0, [r3, #0]
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <HAL_InitTick+0x40>)
 80010da:	6810      	ldr	r0, [r2, #0]
 80010dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80010e0:	f000 f89e 	bl	8001220 <HAL_SYSTICK_Config>
 80010e4:	4604      	mov	r4, r0
 80010e6:	b958      	cbnz	r0, 8001100 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e8:	2d0f      	cmp	r5, #15
 80010ea:	d809      	bhi.n	8001100 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	4602      	mov	r2, r0
 80010ee:	4629      	mov	r1, r5
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 f854 	bl	80011a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_InitTick+0x44>)
 80010fa:	4620      	mov	r0, r4
 80010fc:	601d      	str	r5, [r3, #0]
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001100:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	2000001c 	.word	0x2000001c
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_Init+0x20>)
{
 8001112:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111e:	f000 f82d 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff ffd0 	bl	80010c8 <HAL_InitTick>
  HAL_MspInit();
 8001128:	f002 fa28 	bl	800357c <HAL_MspInit>
}
 800112c:	2000      	movs	r0, #0
 800112e:	bd08      	pop	{r3, pc}
 8001130:	40022000 	.word	0x40022000

08001134 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_IncTick+0x10>)
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <HAL_IncTick+0x14>)
 8001138:	6811      	ldr	r1, [r2, #0]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	440b      	add	r3, r1
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000074 	.word	0x20000074
 8001148:	20000000 	.word	0x20000000

0800114c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800114c:	4b01      	ldr	r3, [pc, #4]	; (8001154 <HAL_GetTick+0x8>)
 800114e:	6818      	ldr	r0, [r3, #0]
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000074 	.word	0x20000074

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff fff6 	bl	800114c <HAL_GetTick>
 8001160:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001164:	bf1e      	ittt	ne
 8001166:	4b04      	ldrne	r3, [pc, #16]	; (8001178 <HAL_Delay+0x20>)
 8001168:	781b      	ldrbne	r3, [r3, #0]
 800116a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	1b40      	subs	r0, r0, r5
 8001172:	4284      	cmp	r4, r0
 8001174:	d8fa      	bhi.n	800116c <HAL_Delay+0x14>
  {
  }
}
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	20000000 	.word	0x20000000

0800117c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800117e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001182:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	0c1b      	lsrs	r3, r3, #16
 800118e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001196:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001198:	60d3      	str	r3, [r2, #12]
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b530      	push	{r4, r5, lr}
 80011a4:	68dc      	ldr	r4, [r3, #12]
 80011a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	bf28      	it	cs
 80011b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011bc:	bf98      	it	ls
 80011be:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	fa05 f303 	lsl.w	r3, r5, r3
 80011c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c8:	bf88      	it	hi
 80011ca:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4019      	ands	r1, r3
 80011ce:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	fa05 f404 	lsl.w	r4, r5, r4
 80011d4:	3c01      	subs	r4, #1
 80011d6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80011d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011da:	ea42 0201 	orr.w	r2, r2, r1
 80011de:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	bfaf      	iteee	ge
 80011e4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	4b06      	ldrlt	r3, [pc, #24]	; (8001204 <HAL_NVIC_SetPriority+0x64>)
 80011ea:	f000 000f 	andlt.w	r0, r0, #15
 80011ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	bfa5      	ittet	ge
 80011f2:	b2d2      	uxtbge	r2, r2
 80011f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80011fe:	bd30      	pop	{r4, r5, pc}
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	e000ed14 	.word	0xe000ed14

08001208 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001208:	2301      	movs	r3, #1
 800120a:	0942      	lsrs	r2, r0, #5
 800120c:	f000 001f 	and.w	r0, r0, #31
 8001210:	fa03 f000 	lsl.w	r0, r3, r0
 8001214:	4b01      	ldr	r3, [pc, #4]	; (800121c <HAL_NVIC_EnableIRQ+0x14>)
 8001216:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100

08001220 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	3801      	subs	r0, #1
 8001222:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001226:	d20a      	bcs.n	800123e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800124c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001250:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001252:	2b02      	cmp	r3, #2
 8001254:	d003      	beq.n	800125e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001256:	2304      	movs	r3, #4
 8001258:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800125a:	2001      	movs	r0, #1
 800125c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125e:	6803      	ldr	r3, [r0, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f022 020e 	bic.w	r2, r2, #14
 8001266:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_DMA_Abort_IT+0x88>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_DMA_Abort_IT+0x6a>
 8001276:	3214      	adds	r2, #20
 8001278:	4293      	cmp	r3, r2
 800127a:	d01e      	beq.n	80012ba <HAL_DMA_Abort_IT+0x6e>
 800127c:	3214      	adds	r2, #20
 800127e:	4293      	cmp	r3, r2
 8001280:	d01d      	beq.n	80012be <HAL_DMA_Abort_IT+0x72>
 8001282:	3214      	adds	r2, #20
 8001284:	4293      	cmp	r3, r2
 8001286:	d01d      	beq.n	80012c4 <HAL_DMA_Abort_IT+0x78>
 8001288:	3214      	adds	r2, #20
 800128a:	4293      	cmp	r3, r2
 800128c:	d01d      	beq.n	80012ca <HAL_DMA_Abort_IT+0x7e>
 800128e:	3214      	adds	r2, #20
 8001290:	4293      	cmp	r3, r2
 8001292:	bf0c      	ite	eq
 8001294:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001298:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012a0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80012aa:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012ae:	b17b      	cbz	r3, 80012d0 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80012b0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012b2:	4620      	mov	r0, r4
 80012b4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012b6:	2301      	movs	r3, #1
 80012b8:	e7f0      	b.n	800129c <HAL_DMA_Abort_IT+0x50>
 80012ba:	2310      	movs	r3, #16
 80012bc:	e7ee      	b.n	800129c <HAL_DMA_Abort_IT+0x50>
 80012be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c2:	e7eb      	b.n	800129c <HAL_DMA_Abort_IT+0x50>
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	e7e8      	b.n	800129c <HAL_DMA_Abort_IT+0x50>
 80012ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ce:	e7e5      	b.n	800129c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80012d0:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	40020008 	.word	0x40020008
 80012d8:	40020000 	.word	0x40020000

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80012e0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	4616      	mov	r6, r2
 80012e4:	4b65      	ldr	r3, [pc, #404]	; (800147c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012e6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800148c <HAL_GPIO_Init+0x1b0>
 80012ea:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001490 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80012ee:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80012f4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80012fc:	45a0      	cmp	r8, r4
 80012fe:	d17f      	bne.n	8001400 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001300:	684d      	ldr	r5, [r1, #4]
 8001302:	2d12      	cmp	r5, #18
 8001304:	f000 80af 	beq.w	8001466 <HAL_GPIO_Init+0x18a>
 8001308:	f200 8088 	bhi.w	800141c <HAL_GPIO_Init+0x140>
 800130c:	2d02      	cmp	r5, #2
 800130e:	f000 80a7 	beq.w	8001460 <HAL_GPIO_Init+0x184>
 8001312:	d87c      	bhi.n	800140e <HAL_GPIO_Init+0x132>
 8001314:	2d00      	cmp	r5, #0
 8001316:	f000 808e 	beq.w	8001436 <HAL_GPIO_Init+0x15a>
 800131a:	2d01      	cmp	r5, #1
 800131c:	f000 809e 	beq.w	800145c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001320:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001324:	2cff      	cmp	r4, #255	; 0xff
 8001326:	bf93      	iteet	ls
 8001328:	4682      	movls	sl, r0
 800132a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800132e:	3d08      	subhi	r5, #8
 8001330:	f8d0 b000 	ldrls.w	fp, [r0]
 8001334:	bf92      	itee	ls
 8001336:	00b5      	lslls	r5, r6, #2
 8001338:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800133c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133e:	fa09 f805 	lsl.w	r8, r9, r5
 8001342:	ea2b 0808 	bic.w	r8, fp, r8
 8001346:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800134a:	bf88      	it	hi
 800134c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001350:	ea48 0505 	orr.w	r5, r8, r5
 8001354:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800135c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001360:	d04e      	beq.n	8001400 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001362:	4d47      	ldr	r5, [pc, #284]	; (8001480 <HAL_GPIO_Init+0x1a4>)
 8001364:	4f46      	ldr	r7, [pc, #280]	; (8001480 <HAL_GPIO_Init+0x1a4>)
 8001366:	69ad      	ldr	r5, [r5, #24]
 8001368:	f026 0803 	bic.w	r8, r6, #3
 800136c:	f045 0501 	orr.w	r5, r5, #1
 8001370:	61bd      	str	r5, [r7, #24]
 8001372:	69bd      	ldr	r5, [r7, #24]
 8001374:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001378:	f005 0501 	and.w	r5, r5, #1
 800137c:	9501      	str	r5, [sp, #4]
 800137e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001382:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001386:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001388:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800138c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001390:	fa09 f90b 	lsl.w	r9, r9, fp
 8001394:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001398:	4d3a      	ldr	r5, [pc, #232]	; (8001484 <HAL_GPIO_Init+0x1a8>)
 800139a:	42a8      	cmp	r0, r5
 800139c:	d068      	beq.n	8001470 <HAL_GPIO_Init+0x194>
 800139e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013a2:	42a8      	cmp	r0, r5
 80013a4:	d066      	beq.n	8001474 <HAL_GPIO_Init+0x198>
 80013a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013aa:	42a8      	cmp	r0, r5
 80013ac:	d064      	beq.n	8001478 <HAL_GPIO_Init+0x19c>
 80013ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013b2:	42a8      	cmp	r0, r5
 80013b4:	bf0c      	ite	eq
 80013b6:	2503      	moveq	r5, #3
 80013b8:	2504      	movne	r5, #4
 80013ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80013be:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80013c2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80013cc:	bf14      	ite	ne
 80013ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d0:	43a5      	biceq	r5, r4
 80013d2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80013da:	bf14      	ite	ne
 80013dc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013de:	43a5      	biceq	r5, r4
 80013e0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e8:	bf14      	ite	ne
 80013ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ec:	43a5      	biceq	r5, r4
 80013ee:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f6:	bf14      	ite	ne
 80013f8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013fa:	ea25 0404 	biceq.w	r4, r5, r4
 80013fe:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001400:	3601      	adds	r6, #1
 8001402:	2e10      	cmp	r6, #16
 8001404:	f47f af73 	bne.w	80012ee <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001408:	b003      	add	sp, #12
 800140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800140e:	2d03      	cmp	r5, #3
 8001410:	d022      	beq.n	8001458 <HAL_GPIO_Init+0x17c>
 8001412:	2d11      	cmp	r5, #17
 8001414:	d184      	bne.n	8001320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001416:	68ca      	ldr	r2, [r1, #12]
 8001418:	3204      	adds	r2, #4
          break;
 800141a:	e781      	b.n	8001320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800141c:	4f1a      	ldr	r7, [pc, #104]	; (8001488 <HAL_GPIO_Init+0x1ac>)
 800141e:	42bd      	cmp	r5, r7
 8001420:	d009      	beq.n	8001436 <HAL_GPIO_Init+0x15a>
 8001422:	d812      	bhi.n	800144a <HAL_GPIO_Init+0x16e>
 8001424:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001494 <HAL_GPIO_Init+0x1b8>
 8001428:	454d      	cmp	r5, r9
 800142a:	d004      	beq.n	8001436 <HAL_GPIO_Init+0x15a>
 800142c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001430:	454d      	cmp	r5, r9
 8001432:	f47f af75 	bne.w	8001320 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001436:	688a      	ldr	r2, [r1, #8]
 8001438:	b1c2      	cbz	r2, 800146c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800143a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800143c:	bf0c      	ite	eq
 800143e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001442:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001446:	2208      	movs	r2, #8
 8001448:	e76a      	b.n	8001320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800144a:	4575      	cmp	r5, lr
 800144c:	d0f3      	beq.n	8001436 <HAL_GPIO_Init+0x15a>
 800144e:	4565      	cmp	r5, ip
 8001450:	d0f1      	beq.n	8001436 <HAL_GPIO_Init+0x15a>
 8001452:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001498 <HAL_GPIO_Init+0x1bc>
 8001456:	e7eb      	b.n	8001430 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001458:	2200      	movs	r2, #0
 800145a:	e761      	b.n	8001320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800145c:	68ca      	ldr	r2, [r1, #12]
          break;
 800145e:	e75f      	b.n	8001320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001460:	68ca      	ldr	r2, [r1, #12]
 8001462:	3208      	adds	r2, #8
          break;
 8001464:	e75c      	b.n	8001320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001466:	68ca      	ldr	r2, [r1, #12]
 8001468:	320c      	adds	r2, #12
          break;
 800146a:	e759      	b.n	8001320 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146c:	2204      	movs	r2, #4
 800146e:	e757      	b.n	8001320 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001470:	2500      	movs	r5, #0
 8001472:	e7a2      	b.n	80013ba <HAL_GPIO_Init+0xde>
 8001474:	2501      	movs	r5, #1
 8001476:	e7a0      	b.n	80013ba <HAL_GPIO_Init+0xde>
 8001478:	2502      	movs	r5, #2
 800147a:	e79e      	b.n	80013ba <HAL_GPIO_Init+0xde>
 800147c:	40010400 	.word	0x40010400
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800
 8001488:	10210000 	.word	0x10210000
 800148c:	10310000 	.word	0x10310000
 8001490:	10320000 	.word	0x10320000
 8001494:	10110000 	.word	0x10110000
 8001498:	10220000 	.word	0x10220000

0800149c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800149c:	b10a      	cbz	r2, 80014a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149e:	6101      	str	r1, [r0, #16]
 80014a0:	4770      	bx	lr
 80014a2:	0409      	lsls	r1, r1, #16
 80014a4:	e7fb      	b.n	800149e <HAL_GPIO_WritePin+0x2>

080014a6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014a6:	6802      	ldr	r2, [r0, #0]
 80014a8:	6953      	ldr	r3, [r2, #20]
 80014aa:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80014ae:	d00d      	beq.n	80014cc <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014b0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80014b4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80014b6:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80014b8:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80014ba:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80014bc:	2300      	movs	r3, #0
 80014be:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80014c4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80014c8:	2001      	movs	r0, #1
 80014ca:	4770      	bx	lr
  }
  return HAL_OK;
 80014cc:	4618      	mov	r0, r3
}
 80014ce:	4770      	bx	lr

080014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80014d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014d4:	4604      	mov	r4, r0
 80014d6:	4617      	mov	r7, r2
 80014d8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014da:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80014de:	b28e      	uxth	r6, r1
 80014e0:	6825      	ldr	r5, [r4, #0]
 80014e2:	f1b8 0f01 	cmp.w	r8, #1
 80014e6:	bf0c      	ite	eq
 80014e8:	696b      	ldreq	r3, [r5, #20]
 80014ea:	69ab      	ldrne	r3, [r5, #24]
 80014ec:	ea36 0303 	bics.w	r3, r6, r3
 80014f0:	bf14      	ite	ne
 80014f2:	2001      	movne	r0, #1
 80014f4:	2000      	moveq	r0, #0
 80014f6:	b908      	cbnz	r0, 80014fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80014f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014fc:	696b      	ldr	r3, [r5, #20]
 80014fe:	055a      	lsls	r2, r3, #21
 8001500:	d512      	bpl.n	8001528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001502:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001504:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800150c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001510:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001512:	2304      	movs	r3, #4
 8001514:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001516:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001518:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800151a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800151c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001520:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001528:	1c7b      	adds	r3, r7, #1
 800152a:	d0d9      	beq.n	80014e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800152c:	b94f      	cbnz	r7, 8001542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800152e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001530:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001532:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001534:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001538:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800153c:	2003      	movs	r0, #3
 800153e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001542:	f7ff fe03 	bl	800114c <HAL_GetTick>
 8001546:	eba0 0009 	sub.w	r0, r0, r9
 800154a:	4287      	cmp	r7, r0
 800154c:	d2c8      	bcs.n	80014e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800154e:	e7ee      	b.n	800152e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001550 <I2C_WaitOnFlagUntilTimeout>:
{
 8001550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001554:	4604      	mov	r4, r0
 8001556:	4690      	mov	r8, r2
 8001558:	461f      	mov	r7, r3
 800155a:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800155c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001560:	b28d      	uxth	r5, r1
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	f1b9 0f01 	cmp.w	r9, #1
 8001568:	bf0c      	ite	eq
 800156a:	695b      	ldreq	r3, [r3, #20]
 800156c:	699b      	ldrne	r3, [r3, #24]
 800156e:	ea35 0303 	bics.w	r3, r5, r3
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	4543      	cmp	r3, r8
 800157a:	d002      	beq.n	8001582 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800157c:	2000      	movs	r0, #0
}
 800157e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001582:	1c7b      	adds	r3, r7, #1
 8001584:	d0ed      	beq.n	8001562 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001586:	b95f      	cbnz	r7, 80015a0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001588:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800158a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800158c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800158e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001592:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001596:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800159c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80015a0:	f7ff fdd4 	bl	800114c <HAL_GetTick>
 80015a4:	1b80      	subs	r0, r0, r6
 80015a6:	4287      	cmp	r7, r0
 80015a8:	d2db      	bcs.n	8001562 <I2C_WaitOnFlagUntilTimeout+0x12>
 80015aa:	e7ed      	b.n	8001588 <I2C_WaitOnFlagUntilTimeout+0x38>

080015ac <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80015ac:	b570      	push	{r4, r5, r6, lr}
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
 80015b2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	d501      	bpl.n	80015c0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80015bc:	2000      	movs	r0, #0
 80015be:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff ff70 	bl	80014a6 <I2C_IsAcknowledgeFailed>
 80015c6:	b9a8      	cbnz	r0, 80015f4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80015c8:	1c6a      	adds	r2, r5, #1
 80015ca:	d0f3      	beq.n	80015b4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015cc:	b965      	cbnz	r5, 80015e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80015d0:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d2:	f043 0320 	orr.w	r3, r3, #32
 80015d6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80015d8:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80015da:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80015dc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80015de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80015e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80015e6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015e8:	f7ff fdb0 	bl	800114c <HAL_GetTick>
 80015ec:	1b80      	subs	r0, r0, r6
 80015ee:	4285      	cmp	r5, r0
 80015f0:	d2e0      	bcs.n	80015b4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80015f2:	e7ec      	b.n	80015ce <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80015f4:	2001      	movs	r0, #1
}
 80015f6:	bd70      	pop	{r4, r5, r6, pc}

080015f8 <I2C_RequestMemoryWrite>:
{
 80015f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80015fc:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80015fe:	6802      	ldr	r2, [r0, #0]
{
 8001600:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001602:	6813      	ldr	r3, [r2, #0]
{
 8001604:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]
{
 800160c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800160e:	9600      	str	r6, [sp, #0]
 8001610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001618:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800161a:	f7ff ff99 	bl	8001550 <I2C_WaitOnFlagUntilTimeout>
 800161e:	b968      	cbnz	r0, 800163c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001626:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800162a:	4633      	mov	r3, r6
 800162c:	491a      	ldr	r1, [pc, #104]	; (8001698 <I2C_RequestMemoryWrite+0xa0>)
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff ff4e 	bl	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001634:	b130      	cbz	r0, 8001644 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001638:	2b04      	cmp	r3, #4
 800163a:	d018      	beq.n	800166e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 800163c:	2003      	movs	r0, #3
}
 800163e:	b004      	add	sp, #16
 8001640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	9003      	str	r0, [sp, #12]
 8001648:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800164a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800164c:	9203      	str	r2, [sp, #12]
 800164e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001650:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001652:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001654:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001656:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001658:	f7ff ffa8 	bl	80015ac <I2C_WaitOnTXEFlagUntilTimeout>
 800165c:	b148      	cbz	r0, 8001672 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001660:	2b04      	cmp	r3, #4
 8001662:	d1eb      	bne.n	800163c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001664:	6822      	ldr	r2, [r4, #0]
 8001666:	6813      	ldr	r3, [r2, #0]
 8001668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800166e:	2001      	movs	r0, #1
 8001670:	e7e5      	b.n	800163e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001672:	f1b8 0f01 	cmp.w	r8, #1
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	d102      	bne.n	8001680 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800167a:	b2ed      	uxtb	r5, r5
 800167c:	611d      	str	r5, [r3, #16]
 800167e:	e7de      	b.n	800163e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001680:	0a2a      	lsrs	r2, r5, #8
 8001682:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001684:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001686:	4632      	mov	r2, r6
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff ff8f 	bl	80015ac <I2C_WaitOnTXEFlagUntilTimeout>
 800168e:	2800      	cmp	r0, #0
 8001690:	d1e5      	bne.n	800165e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	e7f1      	b.n	800167a <I2C_RequestMemoryWrite+0x82>
 8001696:	bf00      	nop
 8001698:	00010002 	.word	0x00010002

0800169c <I2C_RequestMemoryRead>:
{
 800169c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80016a0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016a2:	6803      	ldr	r3, [r0, #0]
{
 80016a4:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016a6:	681a      	ldr	r2, [r3, #0]
{
 80016a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80016b0:	681a      	ldr	r2, [r3, #0]
{
 80016b2:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80016b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016b8:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016be:	9500      	str	r5, [sp, #0]
 80016c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016c2:	2200      	movs	r2, #0
{
 80016c4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016c6:	f7ff ff43 	bl	8001550 <I2C_WaitOnFlagUntilTimeout>
 80016ca:	b980      	cbnz	r0, 80016ee <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	b2ff      	uxtb	r7, r7
 80016d0:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80016d4:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016d6:	492d      	ldr	r1, [pc, #180]	; (800178c <I2C_RequestMemoryRead+0xf0>)
 80016d8:	462b      	mov	r3, r5
 80016da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fef7 	bl	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016e2:	b140      	cbz	r0, 80016f6 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d101      	bne.n	80016ee <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	e000      	b.n	80016f0 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80016ee:	2003      	movs	r0, #3
}
 80016f0:	b004      	add	sp, #16
 80016f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	9003      	str	r0, [sp, #12]
 80016fa:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fc:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fe:	9203      	str	r2, [sp, #12]
 8001700:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001702:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001704:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001706:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001708:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800170a:	f7ff ff4f 	bl	80015ac <I2C_WaitOnTXEFlagUntilTimeout>
 800170e:	b140      	cbz	r0, 8001722 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001712:	2b04      	cmp	r3, #4
 8001714:	d1eb      	bne.n	80016ee <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	6813      	ldr	r3, [r2, #0]
 800171a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e7e3      	b.n	80016ea <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001722:	f1b8 0f01 	cmp.w	r8, #1
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	d124      	bne.n	8001774 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800172a:	b2f6      	uxtb	r6, r6
 800172c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800172e:	462a      	mov	r2, r5
 8001730:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff ff3a 	bl	80015ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001738:	4602      	mov	r2, r0
 800173a:	2800      	cmp	r0, #0
 800173c:	d1e8      	bne.n	8001710 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800173e:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001740:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001742:	680b      	ldr	r3, [r1, #0]
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800174a:	9500      	str	r5, [sp, #0]
 800174c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800174e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001752:	f7ff fefd 	bl	8001550 <I2C_WaitOnFlagUntilTimeout>
 8001756:	2800      	cmp	r0, #0
 8001758:	d1c9      	bne.n	80016ee <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	f047 0701 	orr.w	r7, r7, #1
 8001760:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001764:	462b      	mov	r3, r5
 8001766:	4909      	ldr	r1, [pc, #36]	; (800178c <I2C_RequestMemoryRead+0xf0>)
 8001768:	4620      	mov	r0, r4
 800176a:	f7ff feb1 	bl	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800176e:	2800      	cmp	r0, #0
 8001770:	d1b8      	bne.n	80016e4 <I2C_RequestMemoryRead+0x48>
 8001772:	e7bd      	b.n	80016f0 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001774:	0a32      	lsrs	r2, r6, #8
 8001776:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001778:	990a      	ldr	r1, [sp, #40]	; 0x28
 800177a:	462a      	mov	r2, r5
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff ff15 	bl	80015ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001782:	2800      	cmp	r0, #0
 8001784:	d1c4      	bne.n	8001710 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	e7cf      	b.n	800172a <I2C_RequestMemoryRead+0x8e>
 800178a:	bf00      	nop
 800178c:	00010002 	.word	0x00010002

08001790 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	4604      	mov	r4, r0
 8001794:	460d      	mov	r5, r1
 8001796:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	6943      	ldr	r3, [r0, #20]
 800179c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80017a0:	d001      	beq.n	80017a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80017a2:	2000      	movs	r0, #0
}
 80017a4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017a6:	6942      	ldr	r2, [r0, #20]
 80017a8:	06d2      	lsls	r2, r2, #27
 80017aa:	d50b      	bpl.n	80017c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ac:	f06f 0210 	mvn.w	r2, #16
 80017b0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80017b2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80017b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80017ba:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80017bc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80017be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80017c2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017c4:	b95d      	cbnz	r5, 80017de <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80017c8:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ca:	f043 0320 	orr.w	r3, r3, #32
 80017ce:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80017d0:	2320      	movs	r3, #32
 80017d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80017d6:	2300      	movs	r3, #0
 80017d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017de:	f7ff fcb5 	bl	800114c <HAL_GetTick>
 80017e2:	1b80      	subs	r0, r0, r6
 80017e4:	4285      	cmp	r5, r0
 80017e6:	d2d7      	bcs.n	8001798 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80017e8:	e7ed      	b.n	80017c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080017ea <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80017ea:	b570      	push	{r4, r5, r6, lr}
 80017ec:	4604      	mov	r4, r0
 80017ee:	460d      	mov	r5, r1
 80017f0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	075b      	lsls	r3, r3, #29
 80017f8:	d501      	bpl.n	80017fe <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80017fa:	2000      	movs	r0, #0
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff fe51 	bl	80014a6 <I2C_IsAcknowledgeFailed>
 8001804:	b9a8      	cbnz	r0, 8001832 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001806:	1c6a      	adds	r2, r5, #1
 8001808:	d0f3      	beq.n	80017f2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800180a:	b965      	cbnz	r5, 8001826 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800180c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800180e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001816:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001818:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800181a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800181c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001820:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001824:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001826:	f7ff fc91 	bl	800114c <HAL_GetTick>
 800182a:	1b80      	subs	r0, r0, r6
 800182c:	4285      	cmp	r5, r0
 800182e:	d2e0      	bcs.n	80017f2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001830:	e7ec      	b.n	800180c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001832:	2001      	movs	r0, #1
}
 8001834:	bd70      	pop	{r4, r5, r6, pc}
	...

08001838 <HAL_I2C_Init>:
{
 8001838:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800183a:	4604      	mov	r4, r0
 800183c:	b908      	cbnz	r0, 8001842 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
 8001840:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001842:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001846:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800184a:	b91b      	cbnz	r3, 8001854 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800184c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001850:	f001 fb72 	bl	8002f38 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001854:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001856:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001858:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001864:	f000 fc9e 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001868:	6863      	ldr	r3, [r4, #4]
 800186a:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_I2C_Init+0xf0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d830      	bhi.n	80018d2 <HAL_I2C_Init+0x9a>
 8001870:	4a2e      	ldr	r2, [pc, #184]	; (800192c <HAL_I2C_Init+0xf4>)
 8001872:	4290      	cmp	r0, r2
 8001874:	d9e3      	bls.n	800183e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001876:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001878:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800187a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800187e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001880:	3201      	adds	r2, #1
 8001882:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001884:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_I2C_Init+0xf0>)
 8001886:	3801      	subs	r0, #1
 8001888:	4293      	cmp	r3, r2
 800188a:	d832      	bhi.n	80018f2 <HAL_I2C_Init+0xba>
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001892:	1c43      	adds	r3, r0, #1
 8001894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001898:	2b04      	cmp	r3, #4
 800189a:	bf38      	it	cc
 800189c:	2304      	movcc	r3, #4
 800189e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018a0:	6a22      	ldr	r2, [r4, #32]
 80018a2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80018aa:	68e2      	ldr	r2, [r4, #12]
 80018ac:	6923      	ldr	r3, [r4, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80018b2:	69a2      	ldr	r2, [r4, #24]
 80018b4:	6963      	ldr	r3, [r4, #20]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80018ba:	680b      	ldr	r3, [r1, #0]
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80018d0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018d2:	4a18      	ldr	r2, [pc, #96]	; (8001934 <HAL_I2C_Init+0xfc>)
 80018d4:	4290      	cmp	r0, r2
 80018d6:	d9b2      	bls.n	800183e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80018d8:	4d15      	ldr	r5, [pc, #84]	; (8001930 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80018da:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80018de:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80018e2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80018e4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80018e6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80018e8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80018ec:	fbb2 f2f5 	udiv	r2, r2, r5
 80018f0:	e7c6      	b.n	8001880 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80018f2:	68a2      	ldr	r2, [r4, #8]
 80018f4:	b952      	cbnz	r2, 800190c <HAL_I2C_Init+0xd4>
 80018f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80018fe:	1c43      	adds	r3, r0, #1
 8001900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001904:	b16b      	cbz	r3, 8001922 <HAL_I2C_Init+0xea>
 8001906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190a:	e7c8      	b.n	800189e <HAL_I2C_Init+0x66>
 800190c:	2219      	movs	r2, #25
 800190e:	4353      	muls	r3, r2
 8001910:	fbb0 f0f3 	udiv	r0, r0, r3
 8001914:	1c43      	adds	r3, r0, #1
 8001916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191a:	b113      	cbz	r3, 8001922 <HAL_I2C_Init+0xea>
 800191c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001920:	e7bd      	b.n	800189e <HAL_I2C_Init+0x66>
 8001922:	2301      	movs	r3, #1
 8001924:	e7bb      	b.n	800189e <HAL_I2C_Init+0x66>
 8001926:	bf00      	nop
 8001928:	000186a0 	.word	0x000186a0
 800192c:	001e847f 	.word	0x001e847f
 8001930:	000f4240 	.word	0x000f4240
 8001934:	003d08ff 	.word	0x003d08ff

08001938 <HAL_I2C_Mem_Write>:
{
 8001938:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800193c:	4604      	mov	r4, r0
 800193e:	469a      	mov	sl, r3
 8001940:	4688      	mov	r8, r1
 8001942:	4691      	mov	r9, r2
 8001944:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001946:	f7ff fc01 	bl	800114c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800194a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800194e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001950:	2b20      	cmp	r3, #32
 8001952:	d003      	beq.n	800195c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001954:	2002      	movs	r0, #2
}
 8001956:	b002      	add	sp, #8
 8001958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800195c:	9000      	str	r0, [sp, #0]
 800195e:	2319      	movs	r3, #25
 8001960:	2201      	movs	r2, #1
 8001962:	493e      	ldr	r1, [pc, #248]	; (8001a5c <HAL_I2C_Mem_Write+0x124>)
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff fdf3 	bl	8001550 <I2C_WaitOnFlagUntilTimeout>
 800196a:	2800      	cmp	r0, #0
 800196c:	d1f2      	bne.n	8001954 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800196e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001972:	2b01      	cmp	r3, #1
 8001974:	d0ee      	beq.n	8001954 <HAL_I2C_Mem_Write+0x1c>
 8001976:	2301      	movs	r3, #1
 8001978:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800197c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197e:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001980:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001982:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001984:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001986:	bf58      	it	pl
 8001988:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800198a:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800198c:	bf5c      	itt	pl
 800198e:	f042 0201 	orrpl.w	r2, r2, #1
 8001992:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800199c:	2321      	movs	r3, #33	; 0x21
 800199e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a2:	2340      	movs	r3, #64	; 0x40
 80019a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80019a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019aa:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80019ac:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ae:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019b2:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 80019b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019b8:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80019bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019be:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 80019c0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c2:	4653      	mov	r3, sl
 80019c4:	f7ff fe18 	bl	80015f8 <I2C_RequestMemoryWrite>
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d02a      	beq.n	8001a22 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80019ce:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d107      	bne.n	80019e6 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
 80019d8:	e7bd      	b.n	8001956 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019da:	f7ff fde7 	bl	80015ac <I2C_WaitOnTXEFlagUntilTimeout>
 80019de:	b120      	cbz	r0, 80019ea <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d034      	beq.n	8001a50 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 80019e6:	2003      	movs	r0, #3
 80019e8:	e7b5      	b.n	8001956 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80019ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019ec:	6827      	ldr	r7, [r4, #0]
 80019ee:	1c4b      	adds	r3, r1, #1
 80019f0:	6263      	str	r3, [r4, #36]	; 0x24
 80019f2:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80019f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80019f6:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80019f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80019fa:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a02:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001a04:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a06:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001a08:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a0a:	d50a      	bpl.n	8001a22 <HAL_I2C_Mem_Write+0xea>
 8001a0c:	b148      	cbz	r0, 8001a22 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a0e:	1c8b      	adds	r3, r1, #2
 8001a10:	6263      	str	r3, [r4, #36]	; 0x24
 8001a12:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001a14:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a16:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001a18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001a1a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001a22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a24:	462a      	mov	r2, r5
 8001a26:	4631      	mov	r1, r6
 8001a28:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1d5      	bne.n	80019da <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2e:	f7ff fedc 	bl	80017ea <I2C_WaitOnBTFFlagUntilTimeout>
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d1d4      	bne.n	80019e0 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001a42:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001a4e:	e782      	b.n	8001956 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	6813      	ldr	r3, [r2, #0]
 8001a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e7bc      	b.n	80019d6 <HAL_I2C_Mem_Write+0x9e>
 8001a5c:	00100002 	.word	0x00100002
 8001a60:	ffff0000 	.word	0xffff0000

08001a64 <HAL_I2C_Mem_Read>:
{
 8001a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a68:	4604      	mov	r4, r0
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	469a      	mov	sl, r3
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4691      	mov	r9, r2
 8001a72:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001a74:	f7ff fb6a 	bl	800114c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a78:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001a7c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d004      	beq.n	8001a8c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001a82:	2502      	movs	r5, #2
}
 8001a84:	4628      	mov	r0, r5
 8001a86:	b006      	add	sp, #24
 8001a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a8c:	9000      	str	r0, [sp, #0]
 8001a8e:	2319      	movs	r3, #25
 8001a90:	2201      	movs	r2, #1
 8001a92:	4981      	ldr	r1, [pc, #516]	; (8001c98 <HAL_I2C_Mem_Read+0x234>)
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff fd5b 	bl	8001550 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d1f1      	bne.n	8001a82 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001a9e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d0ed      	beq.n	8001a82 <HAL_I2C_Mem_Read+0x1e>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aac:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aae:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab2:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ab4:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab6:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001ab8:	bf58      	it	pl
 8001aba:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001abc:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001abe:	bf5c      	itt	pl
 8001ac0:	f042 0201 	orrpl.w	r2, r2, #1
 8001ac4:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001acc:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ace:	2322      	movs	r3, #34	; 0x22
 8001ad0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ad4:	2340      	movs	r3, #64	; 0x40
 8001ad6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001adc:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001ae0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ae2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ae6:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8001ae8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aea:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aec:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aee:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001af0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af2:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001af4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af6:	4653      	mov	r3, sl
 8001af8:	f7ff fdd0 	bl	800169c <I2C_RequestMemoryRead>
 8001afc:	4605      	mov	r5, r0
 8001afe:	b130      	cbz	r0, 8001b0e <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001b02:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d13d      	bne.n	8001b86 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8001b0a:	2501      	movs	r5, #1
 8001b0c:	e7ba      	b.n	8001a84 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001b0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	b992      	cbnz	r2, 8001b3a <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b14:	9002      	str	r0, [sp, #8]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	9202      	str	r2, [sp, #8]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	9202      	str	r2, [sp, #8]
 8001b1e:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b26:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001b34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001b38:	e7a4      	b.n	8001a84 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001b3a:	2a01      	cmp	r2, #1
 8001b3c:	d125      	bne.n	8001b8a <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b44:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b46:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	9003      	str	r0, [sp, #12]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	9203      	str	r2, [sp, #12]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	9203      	str	r2, [sp, #12]
 8001b54:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b5e:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001ca0 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8001b64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0de      	beq.n	8001b28 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d877      	bhi.n	8001c5e <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d127      	bne.n	8001bc2 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001b72:	4632      	mov	r2, r6
 8001b74:	4639      	mov	r1, r7
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff fe0a 	bl	8001790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d03f      	beq.n	8001c00 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d1c1      	bne.n	8001b0a <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 8001b86:	2503      	movs	r5, #3
 8001b88:	e77c      	b.n	8001a84 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001b8a:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b8c:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001b8e:	d10e      	bne.n	8001bae <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b96:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	9004      	str	r0, [sp, #16]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	9204      	str	r2, [sp, #16]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	9204      	str	r2, [sp, #16]
 8001ba4:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bac:	e7d6      	b.n	8001b5c <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bb2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb4:	9005      	str	r0, [sp, #20]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	9205      	str	r2, [sp, #20]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	9305      	str	r3, [sp, #20]
 8001bbe:	9b05      	ldr	r3, [sp, #20]
 8001bc0:	e7ce      	b.n	8001b60 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8001bc2:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc4:	9600      	str	r6, [sp, #0]
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4641      	mov	r1, r8
 8001bce:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001bd0:	d124      	bne.n	8001c1c <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd2:	f7ff fcbd 	bl	8001550 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d1d5      	bne.n	8001b86 <HAL_I2C_Mem_Read+0x122>
 8001bda:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be4:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001be6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	1c51      	adds	r1, r2, #1
 8001bec:	6261      	str	r1, [r4, #36]	; 0x24
 8001bee:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001bf0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001bf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bfe:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	6262      	str	r2, [r4, #36]	; 0x24
 8001c06:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c08:	6912      	ldr	r2, [r2, #16]
 8001c0a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001c0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001c1a:	e7a3      	b.n	8001b64 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c1c:	f7ff fc98 	bl	8001550 <I2C_WaitOnFlagUntilTimeout>
 8001c20:	4602      	mov	r2, r0
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d1af      	bne.n	8001b86 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c26:	6821      	ldr	r1, [r4, #0]
 8001c28:	680b      	ldr	r3, [r1, #0]
 8001c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c2e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c34:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	6261      	str	r1, [r4, #36]	; 0x24
 8001c3a:	6821      	ldr	r1, [r4, #0]
 8001c3c:	6909      	ldr	r1, [r1, #16]
 8001c3e:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001c40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c42:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001c44:	3b01      	subs	r3, #1
 8001c46:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4a:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	f7ff fc7c 	bl	8001550 <I2C_WaitOnFlagUntilTimeout>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d0bf      	beq.n	8001bdc <HAL_I2C_Mem_Read+0x178>
 8001c5c:	e793      	b.n	8001b86 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5e:	4632      	mov	r2, r6
 8001c60:	4639      	mov	r1, r7
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff fd94 	bl	8001790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d189      	bne.n	8001b80 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	6262      	str	r2, [r4, #36]	; 0x24
 8001c72:	6822      	ldr	r2, [r4, #0]
 8001c74:	6912      	ldr	r2, [r2, #16]
 8001c76:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001c78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c7a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001c80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c88:	6953      	ldr	r3, [r2, #20]
 8001c8a:	075b      	lsls	r3, r3, #29
 8001c8c:	f57f af6a 	bpl.w	8001b64 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c92:	1c59      	adds	r1, r3, #1
 8001c94:	6261      	str	r1, [r4, #36]	; 0x24
 8001c96:	e7b7      	b.n	8001c08 <HAL_I2C_Mem_Read+0x1a4>
 8001c98:	00100002 	.word	0x00100002
 8001c9c:	ffff0000 	.word	0xffff0000
 8001ca0:	00010004 	.word	0x00010004

08001ca4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca4:	6803      	ldr	r3, [r0, #0]
{
 8001ca6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	07db      	lsls	r3, r3, #31
{
 8001cac:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	d410      	bmi.n	8001cd2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	079f      	lsls	r7, r3, #30
 8001cb4:	d45e      	bmi.n	8001d74 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	0719      	lsls	r1, r3, #28
 8001cba:	f100 8095 	bmi.w	8001de8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cbe:	682b      	ldr	r3, [r5, #0]
 8001cc0:	075a      	lsls	r2, r3, #29
 8001cc2:	f100 80bf 	bmi.w	8001e44 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc6:	69ea      	ldr	r2, [r5, #28]
 8001cc8:	2a00      	cmp	r2, #0
 8001cca:	f040 812d 	bne.w	8001f28 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001cce:	2000      	movs	r0, #0
 8001cd0:	e014      	b.n	8001cfc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cd2:	4c90      	ldr	r4, [pc, #576]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	6863      	ldr	r3, [r4, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d007      	beq.n	8001cee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5e>
 8001ce8:	6863      	ldr	r3, [r4, #4]
 8001cea:	03de      	lsls	r6, r3, #15
 8001cec:	d509      	bpl.n	8001d02 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	039c      	lsls	r4, r3, #14
 8001cf2:	d5dd      	bpl.n	8001cb0 <HAL_RCC_OscConfig+0xc>
 8001cf4:	686b      	ldr	r3, [r5, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1da      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
}
 8001cfc:	b002      	add	sp, #8
 8001cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d02:	686b      	ldr	r3, [r5, #4]
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d110      	bne.n	8001d2c <HAL_RCC_OscConfig+0x88>
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d12:	f7ff fa1b 	bl	800114c <HAL_GetTick>
 8001d16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	0398      	lsls	r0, r3, #14
 8001d1c:	d4c8      	bmi.n	8001cb0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fa15 	bl	800114c <HAL_GetTick>
 8001d22:	1b80      	subs	r0, r0, r6
 8001d24:	2864      	cmp	r0, #100	; 0x64
 8001d26:	d9f7      	bls.n	8001d18 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001d28:	2003      	movs	r0, #3
 8001d2a:	e7e7      	b.n	8001cfc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2c:	b99b      	cbnz	r3, 8001d56 <HAL_RCC_OscConfig+0xb2>
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d34:	6023      	str	r3, [r4, #0]
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fa05 	bl	800114c <HAL_GetTick>
 8001d42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	0399      	lsls	r1, r3, #14
 8001d48:	d5b2      	bpl.n	8001cb0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4a:	f7ff f9ff 	bl	800114c <HAL_GetTick>
 8001d4e:	1b80      	subs	r0, r0, r6
 8001d50:	2864      	cmp	r0, #100	; 0x64
 8001d52:	d9f7      	bls.n	8001d44 <HAL_RCC_OscConfig+0xa0>
 8001d54:	e7e8      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	d103      	bne.n	8001d66 <HAL_RCC_OscConfig+0xc2>
 8001d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d62:	6023      	str	r3, [r4, #0]
 8001d64:	e7d1      	b.n	8001d0a <HAL_RCC_OscConfig+0x66>
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6a:	6023      	str	r3, [r4, #0]
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d72:	e7cd      	b.n	8001d10 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d74:	4c67      	ldr	r4, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d76:	6863      	ldr	r3, [r4, #4]
 8001d78:	f013 0f0c 	tst.w	r3, #12
 8001d7c:	d007      	beq.n	8001d8e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d7e:	6863      	ldr	r3, [r4, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d110      	bne.n	8001daa <HAL_RCC_OscConfig+0x106>
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	03da      	lsls	r2, r3, #15
 8001d8c:	d40d      	bmi.n	8001daa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	079b      	lsls	r3, r3, #30
 8001d92:	d502      	bpl.n	8001d9a <HAL_RCC_OscConfig+0xf6>
 8001d94:	692b      	ldr	r3, [r5, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d1af      	bne.n	8001cfa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	696a      	ldr	r2, [r5, #20]
 8001d9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001da2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001da6:	6023      	str	r3, [r4, #0]
 8001da8:	e785      	b.n	8001cb6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001daa:	692a      	ldr	r2, [r5, #16]
 8001dac:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dae:	b16a      	cbz	r2, 8001dcc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001db4:	f7ff f9ca 	bl	800114c <HAL_GetTick>
 8001db8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	079f      	lsls	r7, r3, #30
 8001dbe:	d4ec      	bmi.n	8001d9a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f9c4 	bl	800114c <HAL_GetTick>
 8001dc4:	1b80      	subs	r0, r0, r6
 8001dc6:	2802      	cmp	r0, #2
 8001dc8:	d9f7      	bls.n	8001dba <HAL_RCC_OscConfig+0x116>
 8001dca:	e7ad      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001dcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dce:	f7ff f9bd 	bl	800114c <HAL_GetTick>
 8001dd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	0798      	lsls	r0, r3, #30
 8001dd8:	f57f af6d 	bpl.w	8001cb6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff f9b6 	bl	800114c <HAL_GetTick>
 8001de0:	1b80      	subs	r0, r0, r6
 8001de2:	2802      	cmp	r0, #2
 8001de4:	d9f6      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x130>
 8001de6:	e79f      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de8:	69aa      	ldr	r2, [r5, #24]
 8001dea:	4c4a      	ldr	r4, [pc, #296]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_RCC_OscConfig+0x278>)
 8001dee:	b1da      	cbz	r2, 8001e28 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001df4:	f7ff f9aa 	bl	800114c <HAL_GetTick>
 8001df8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dfc:	079b      	lsls	r3, r3, #30
 8001dfe:	d50d      	bpl.n	8001e1c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e00:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e04:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e0c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001e0e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001e10:	9b01      	ldr	r3, [sp, #4]
 8001e12:	1e5a      	subs	r2, r3, #1
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f9      	bne.n	8001e0e <HAL_RCC_OscConfig+0x16a>
 8001e1a:	e750      	b.n	8001cbe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff f996 	bl	800114c <HAL_GetTick>
 8001e20:	1b80      	subs	r0, r0, r6
 8001e22:	2802      	cmp	r0, #2
 8001e24:	d9e9      	bls.n	8001dfa <HAL_RCC_OscConfig+0x156>
 8001e26:	e77f      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001e28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f98f 	bl	800114c <HAL_GetTick>
 8001e2e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e32:	079f      	lsls	r7, r3, #30
 8001e34:	f57f af43 	bpl.w	8001cbe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e38:	f7ff f988 	bl	800114c <HAL_GetTick>
 8001e3c:	1b80      	subs	r0, r0, r6
 8001e3e:	2802      	cmp	r0, #2
 8001e40:	d9f6      	bls.n	8001e30 <HAL_RCC_OscConfig+0x18c>
 8001e42:	e771      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e44:	4c33      	ldr	r4, [pc, #204]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e46:	69e3      	ldr	r3, [r4, #28]
 8001e48:	00d8      	lsls	r0, r3, #3
 8001e4a:	d424      	bmi.n	8001e96 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001e4c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	69e3      	ldr	r3, [r4, #28]
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	61e3      	str	r3, [r4, #28]
 8001e56:	69e3      	ldr	r3, [r4, #28]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	4e30      	ldr	r6, [pc, #192]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e62:	6833      	ldr	r3, [r6, #0]
 8001e64:	05d9      	lsls	r1, r3, #23
 8001e66:	d518      	bpl.n	8001e9a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e68:	68eb      	ldr	r3, [r5, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d126      	bne.n	8001ebc <HAL_RCC_OscConfig+0x218>
 8001e6e:	6a23      	ldr	r3, [r4, #32]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e76:	f7ff f969 	bl	800114c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e7e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	6a23      	ldr	r3, [r4, #32]
 8001e82:	079b      	lsls	r3, r3, #30
 8001e84:	d53f      	bpl.n	8001f06 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001e86:	2f00      	cmp	r7, #0
 8001e88:	f43f af1d 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8c:	69e3      	ldr	r3, [r4, #28]
 8001e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e92:	61e3      	str	r3, [r4, #28]
 8001e94:	e717      	b.n	8001cc6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2700      	movs	r7, #0
 8001e98:	e7e2      	b.n	8001e60 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	6833      	ldr	r3, [r6, #0]
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f953 	bl	800114c <HAL_GetTick>
 8001ea6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	6833      	ldr	r3, [r6, #0]
 8001eaa:	05da      	lsls	r2, r3, #23
 8001eac:	d4dc      	bmi.n	8001e68 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7ff f94d 	bl	800114c <HAL_GetTick>
 8001eb2:	eba0 0008 	sub.w	r0, r0, r8
 8001eb6:	2864      	cmp	r0, #100	; 0x64
 8001eb8:	d9f6      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x204>
 8001eba:	e735      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebc:	b9ab      	cbnz	r3, 8001eea <HAL_RCC_OscConfig+0x246>
 8001ebe:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6223      	str	r3, [r4, #32]
 8001eca:	6a23      	ldr	r3, [r4, #32]
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f93b 	bl	800114c <HAL_GetTick>
 8001ed6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	6a23      	ldr	r3, [r4, #32]
 8001eda:	0798      	lsls	r0, r3, #30
 8001edc:	d5d3      	bpl.n	8001e86 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff f935 	bl	800114c <HAL_GetTick>
 8001ee2:	1b80      	subs	r0, r0, r6
 8001ee4:	4540      	cmp	r0, r8
 8001ee6:	d9f7      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x234>
 8001ee8:	e71e      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	6a23      	ldr	r3, [r4, #32]
 8001eee:	d103      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x254>
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6223      	str	r3, [r4, #32]
 8001ef6:	e7ba      	b.n	8001e6e <HAL_RCC_OscConfig+0x1ca>
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6223      	str	r3, [r4, #32]
 8001efe:	6a23      	ldr	r3, [r4, #32]
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	e7b6      	b.n	8001e74 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f921 	bl	800114c <HAL_GetTick>
 8001f0a:	eba0 0008 	sub.w	r0, r0, r8
 8001f0e:	42b0      	cmp	r0, r6
 8001f10:	d9b6      	bls.n	8001e80 <HAL_RCC_OscConfig+0x1dc>
 8001f12:	e709      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	42420000 	.word	0x42420000
 8001f1c:	42420480 	.word	0x42420480
 8001f20:	2000001c 	.word	0x2000001c
 8001f24:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4c22      	ldr	r4, [pc, #136]	; (8001fb4 <HAL_RCC_OscConfig+0x310>)
 8001f2a:	6863      	ldr	r3, [r4, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	f43f aee2 	beq.w	8001cfa <HAL_RCC_OscConfig+0x56>
 8001f36:	2300      	movs	r3, #0
 8001f38:	4e1f      	ldr	r6, [pc, #124]	; (8001fb8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3e:	d12b      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001f40:	f7ff f904 	bl	800114c <HAL_GetTick>
 8001f44:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	0199      	lsls	r1, r3, #6
 8001f4a:	d41f      	bmi.n	8001f8c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f4c:	6a2b      	ldr	r3, [r5, #32]
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f54:	6862      	ldr	r2, [r4, #4]
 8001f56:	68a9      	ldr	r1, [r5, #8]
 8001f58:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f60:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001f62:	6862      	ldr	r2, [r4, #4]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f6e:	2301      	movs	r3, #1
 8001f70:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f72:	f7ff f8eb 	bl	800114c <HAL_GetTick>
 8001f76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	019a      	lsls	r2, r3, #6
 8001f7c:	f53f aea7 	bmi.w	8001cce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f8e4 	bl	800114c <HAL_GetTick>
 8001f84:	1b40      	subs	r0, r0, r5
 8001f86:	2802      	cmp	r0, #2
 8001f88:	d9f6      	bls.n	8001f78 <HAL_RCC_OscConfig+0x2d4>
 8001f8a:	e6cd      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f8de 	bl	800114c <HAL_GetTick>
 8001f90:	1bc0      	subs	r0, r0, r7
 8001f92:	2802      	cmp	r0, #2
 8001f94:	d9d7      	bls.n	8001f46 <HAL_RCC_OscConfig+0x2a2>
 8001f96:	e6c7      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001f98:	f7ff f8d8 	bl	800114c <HAL_GetTick>
 8001f9c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	019b      	lsls	r3, r3, #6
 8001fa2:	f57f ae94 	bpl.w	8001cce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff f8d1 	bl	800114c <HAL_GetTick>
 8001faa:	1b40      	subs	r0, r0, r5
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9f6      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2fa>
 8001fb0:	e6ba      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	42420060 	.word	0x42420060

08001fbc <HAL_RCC_GetSysClockFreq>:
{
 8001fbc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_GetSysClockFreq+0x70>)
{
 8001fc0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fc2:	ac02      	add	r4, sp, #8
 8001fc4:	f103 0510 	add.w	r5, r3, #16
 8001fc8:	4622      	mov	r2, r4
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	3308      	adds	r3, #8
 8001fd0:	c203      	stmia	r2!, {r0, r1}
 8001fd2:	42ab      	cmp	r3, r5
 8001fd4:	4614      	mov	r4, r2
 8001fd6:	d1f7      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f88d 3004 	strb.w	r3, [sp, #4]
 8001fde:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001fe0:	4913      	ldr	r1, [pc, #76]	; (8002030 <HAL_RCC_GetSysClockFreq+0x74>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fe2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001fe6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe8:	f003 020c 	and.w	r2, r3, #12
 8001fec:	2a04      	cmp	r2, #4
 8001fee:	d01b      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x6c>
 8001ff0:	2a08      	cmp	r2, #8
 8001ff2:	d002      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSI_VALUE;
 8001ff4:	480f      	ldr	r0, [pc, #60]	; (8002034 <HAL_RCC_GetSysClockFreq+0x78>)
}
 8001ff6:	b007      	add	sp, #28
 8001ff8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffa:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001ffe:	a806      	add	r0, sp, #24
 8002000:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002002:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002004:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002008:	d50b      	bpl.n	8002022 <HAL_RCC_GetSysClockFreq+0x66>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800200a:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800200c:	480a      	ldr	r0, [pc, #40]	; (8002038 <HAL_RCC_GetSysClockFreq+0x7c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800200e:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002012:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002014:	aa06      	add	r2, sp, #24
 8002016:	4413      	add	r3, r2
 8002018:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800201c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002020:	e7e9      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002022:	4806      	ldr	r0, [pc, #24]	; (800203c <HAL_RCC_GetSysClockFreq+0x80>)
 8002024:	4350      	muls	r0, r2
 8002026:	e7e6      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <HAL_RCC_GetSysClockFreq+0x7c>)
  return sysclockfreq;
 800202a:	e7e4      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 800202c:	08003f48 	.word	0x08003f48
 8002030:	40021000 	.word	0x40021000
 8002034:	007a1200 	.word	0x007a1200
 8002038:	00b71b00 	.word	0x00b71b00
 800203c:	003d0900 	.word	0x003d0900

08002040 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002040:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_RCC_ClockConfig+0x154>)
{
 8002042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002046:	6813      	ldr	r3, [r2, #0]
{
 8002048:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	428b      	cmp	r3, r1
{
 8002050:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002052:	d32a      	bcc.n	80020aa <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	6829      	ldr	r1, [r5, #0]
 8002056:	078c      	lsls	r4, r1, #30
 8002058:	d434      	bmi.n	80020c4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	07ca      	lsls	r2, r1, #31
 800205c:	d447      	bmi.n	80020ee <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800205e:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <HAL_RCC_ClockConfig+0x154>)
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	429e      	cmp	r6, r3
 8002068:	f0c0 8082 	bcc.w	8002170 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	682a      	ldr	r2, [r5, #0]
 800206e:	4c4a      	ldr	r4, [pc, #296]	; (8002198 <HAL_RCC_ClockConfig+0x158>)
 8002070:	f012 0f04 	tst.w	r2, #4
 8002074:	f040 8087 	bne.w	8002186 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	0713      	lsls	r3, r2, #28
 800207a:	d506      	bpl.n	800208a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207c:	6863      	ldr	r3, [r4, #4]
 800207e:	692a      	ldr	r2, [r5, #16]
 8002080:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002084:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002088:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208a:	f7ff ff97 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 800208e:	6863      	ldr	r3, [r4, #4]
 8002090:	4a42      	ldr	r2, [pc, #264]	; (800219c <HAL_RCC_ClockConfig+0x15c>)
 8002092:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	40d8      	lsrs	r0, r3
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_ClockConfig+0x160>)
 800209c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff f812 	bl	80010c8 <HAL_InitTick>
  return HAL_OK;
 80020a4:	2000      	movs	r0, #0
}
 80020a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	f023 0307 	bic.w	r3, r3, #7
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b4:	6813      	ldr	r3, [r2, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	4299      	cmp	r1, r3
 80020bc:	d0ca      	beq.n	8002054 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80020be:	2001      	movs	r0, #1
 80020c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c4:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ca:	bf1e      	ittt	ne
 80020cc:	685a      	ldrne	r2, [r3, #4]
 80020ce:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80020d2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d6:	bf42      	ittt	mi
 80020d8:	685a      	ldrmi	r2, [r3, #4]
 80020da:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80020de:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	68a8      	ldr	r0, [r5, #8]
 80020e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020e8:	4302      	orrs	r2, r0
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	e7b5      	b.n	800205a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	686a      	ldr	r2, [r5, #4]
 80020f0:	4c29      	ldr	r4, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x158>)
 80020f2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	d11c      	bne.n	8002132 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	d0df      	beq.n	80020be <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002104:	f023 0303 	bic.w	r3, r3, #3
 8002108:	4313      	orrs	r3, r2
 800210a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800210c:	f7ff f81e 	bl	800114c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002110:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002112:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002114:	2b01      	cmp	r3, #1
 8002116:	d114      	bne.n	8002142 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002118:	6863      	ldr	r3, [r4, #4]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b04      	cmp	r3, #4
 8002120:	d09d      	beq.n	800205e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002122:	f7ff f813 	bl	800114c <HAL_GetTick>
 8002126:	1bc0      	subs	r0, r0, r7
 8002128:	4540      	cmp	r0, r8
 800212a:	d9f5      	bls.n	8002118 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 800212c:	2003      	movs	r0, #3
 800212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002132:	2a02      	cmp	r2, #2
 8002134:	d102      	bne.n	800213c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800213a:	e7df      	b.n	80020fc <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	f013 0f02 	tst.w	r3, #2
 8002140:	e7dc      	b.n	80020fc <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002142:	2b02      	cmp	r3, #2
 8002144:	d10f      	bne.n	8002166 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002146:	6863      	ldr	r3, [r4, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d086      	beq.n	800205e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe fffc 	bl	800114c <HAL_GetTick>
 8002154:	1bc0      	subs	r0, r0, r7
 8002156:	4540      	cmp	r0, r8
 8002158:	d9f5      	bls.n	8002146 <HAL_RCC_ClockConfig+0x106>
 800215a:	e7e7      	b.n	800212c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7fe fff6 	bl	800114c <HAL_GetTick>
 8002160:	1bc0      	subs	r0, r0, r7
 8002162:	4540      	cmp	r0, r8
 8002164:	d8e2      	bhi.n	800212c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002166:	6863      	ldr	r3, [r4, #4]
 8002168:	f013 0f0c 	tst.w	r3, #12
 800216c:	d1f6      	bne.n	800215c <HAL_RCC_ClockConfig+0x11c>
 800216e:	e776      	b.n	800205e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f023 0307 	bic.w	r3, r3, #7
 8002176:	4333      	orrs	r3, r6
 8002178:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	429e      	cmp	r6, r3
 8002182:	d19c      	bne.n	80020be <HAL_RCC_ClockConfig+0x7e>
 8002184:	e772      	b.n	800206c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	68e9      	ldr	r1, [r5, #12]
 800218a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800218e:	430b      	orrs	r3, r1
 8002190:	6063      	str	r3, [r4, #4]
 8002192:	e771      	b.n	8002078 <HAL_RCC_ClockConfig+0x38>
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
 800219c:	08003f58 	.word	0x08003f58
 80021a0:	2000001c 	.word	0x2000001c

080021a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021b2:	6810      	ldr	r0, [r2, #0]
}    
 80021b4:	40d8      	lsrs	r0, r3
 80021b6:	4770      	bx	lr
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08003f68 	.word	0x08003f68
 80021c0:	2000001c 	.word	0x2000001c

080021c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	4a03      	ldr	r2, [pc, #12]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021d2:	6810      	ldr	r0, [r2, #0]
} 
 80021d4:	40d8      	lsrs	r0, r3
 80021d6:	4770      	bx	lr
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08003f68 	.word	0x08003f68
 80021e0:	2000001c 	.word	0x2000001c

080021e4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021e4:	6a03      	ldr	r3, [r0, #32]
{
 80021e6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021f2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80021fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80021fe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002202:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002204:	4d0a      	ldr	r5, [pc, #40]	; (8002230 <TIM_OC1_SetConfig+0x4c>)
 8002206:	42a8      	cmp	r0, r5
 8002208:	d10b      	bne.n	8002222 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800220a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800220c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002210:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002212:	698e      	ldr	r6, [r1, #24]
 8002214:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002216:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800221a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800221c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002220:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002222:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002224:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002226:	684a      	ldr	r2, [r1, #4]
 8002228:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222a:	6203      	str	r3, [r0, #32]
 800222c:	bd70      	pop	{r4, r5, r6, pc}
 800222e:	bf00      	nop
 8002230:	40012c00 	.word	0x40012c00

08002234 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002234:	6a03      	ldr	r3, [r0, #32]
{
 8002236:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800223c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002240:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002242:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002244:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002246:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800224a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800224c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800224e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002252:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002256:	4d0b      	ldr	r5, [pc, #44]	; (8002284 <TIM_OC3_SetConfig+0x50>)
 8002258:	42a8      	cmp	r0, r5
 800225a:	d10d      	bne.n	8002278 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800225c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800225e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002262:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002266:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002268:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800226a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800226e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002274:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002278:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800227a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800227c:	684a      	ldr	r2, [r1, #4]
 800227e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002280:	6203      	str	r3, [r0, #32]
 8002282:	bd70      	pop	{r4, r5, r6, pc}
 8002284:	40012c00 	.word	0x40012c00

08002288 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002288:	6a03      	ldr	r3, [r0, #32]
{
 800228a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800228c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002290:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002292:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002294:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002296:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002298:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800229a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800229e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80022a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022ac:	4d06      	ldr	r5, [pc, #24]	; (80022c8 <TIM_OC4_SetConfig+0x40>)
 80022ae:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80022b0:	bf02      	ittt	eq
 80022b2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022b4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80022b8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022c0:	684a      	ldr	r2, [r1, #4]
 80022c2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c4:	6203      	str	r3, [r0, #32]
 80022c6:	bd30      	pop	{r4, r5, pc}
 80022c8:	40012c00 	.word	0x40012c00

080022cc <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022cc:	6803      	ldr	r3, [r0, #0]
}
 80022ce:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	4770      	bx	lr

080022e2 <HAL_TIM_PWM_MspInit>:
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80022e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80022e8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	f04f 0302 	mov.w	r3, #2
 80022f0:	d01c      	beq.n	800232c <HAL_TIM_ConfigClockSource+0x48>
 80022f2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80022f8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80022fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80022fe:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002300:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002304:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002308:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800230a:	680a      	ldr	r2, [r1, #0]
 800230c:	2a40      	cmp	r2, #64	; 0x40
 800230e:	d079      	beq.n	8002404 <HAL_TIM_ConfigClockSource+0x120>
 8002310:	d819      	bhi.n	8002346 <HAL_TIM_ConfigClockSource+0x62>
 8002312:	2a10      	cmp	r2, #16
 8002314:	f000 8093 	beq.w	800243e <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	d80a      	bhi.n	8002330 <HAL_TIM_ConfigClockSource+0x4c>
 800231a:	2a00      	cmp	r2, #0
 800231c:	f000 8089 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002320:	2301      	movs	r3, #1
 8002322:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002326:	2300      	movs	r3, #0
 8002328:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800232c:	4618      	mov	r0, r3
}
 800232e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002330:	2a20      	cmp	r2, #32
 8002332:	f000 808a 	beq.w	800244a <HAL_TIM_ConfigClockSource+0x166>
 8002336:	2a30      	cmp	r2, #48	; 0x30
 8002338:	d1f2      	bne.n	8002320 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800233a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800233c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002340:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002344:	e036      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002346:	2a70      	cmp	r2, #112	; 0x70
 8002348:	d036      	beq.n	80023b8 <HAL_TIM_ConfigClockSource+0xd4>
 800234a:	d81b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0xa0>
 800234c:	2a50      	cmp	r2, #80	; 0x50
 800234e:	d042      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0xf2>
 8002350:	2a60      	cmp	r2, #96	; 0x60
 8002352:	d1e5      	bne.n	8002320 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002354:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002356:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002358:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800235c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800235e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002360:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002362:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002364:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002368:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800236c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002370:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002374:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002376:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002378:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800237a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800237e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002382:	e017      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002384:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002388:	d011      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0xca>
 800238a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800238e:	d1c7      	bne.n	8002320 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002390:	688a      	ldr	r2, [r1, #8]
 8002392:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002394:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002396:	68c9      	ldr	r1, [r1, #12]
 8002398:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800239a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800239e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023a2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023a4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ac:	e002      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	e7b3      	b.n	8002320 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023b8:	688a      	ldr	r2, [r1, #8]
 80023ba:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80023bc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023be:	68c9      	ldr	r1, [r1, #12]
 80023c0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023c2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023ca:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80023cc:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80023ce:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80023d4:	e7ee      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d6:	684c      	ldr	r4, [r1, #4]
 80023d8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023da:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023dc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023de:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023e2:	f025 0501 	bic.w	r5, r5, #1
 80023e6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80023ea:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023f0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80023f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80023f8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023fe:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002402:	e7d7      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002404:	684c      	ldr	r4, [r1, #4]
 8002406:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002408:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800240c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002410:	f025 0501 	bic.w	r5, r5, #1
 8002414:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002416:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002418:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800241a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800241e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002424:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002426:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002428:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800242c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002430:	e7c0      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002432:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002434:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002438:	f042 0207 	orr.w	r2, r2, #7
 800243c:	e7ba      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800243e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002440:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002444:	f042 0217 	orr.w	r2, r2, #23
 8002448:	e7b4      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800244a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800244c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002450:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002454:	e7ae      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0xd0>

08002456 <HAL_TIM_OC_DelayElapsedCallback>:
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_IC_CaptureCallback>:
 8002458:	4770      	bx	lr

0800245a <HAL_TIM_PWM_PulseFinishedCallback>:
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_TriggerCallback>:
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800245e:	6803      	ldr	r3, [r0, #0]
{
 8002460:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002462:	691a      	ldr	r2, [r3, #16]
{
 8002464:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002466:	0791      	lsls	r1, r2, #30
 8002468:	d50e      	bpl.n	8002488 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	0792      	lsls	r2, r2, #30
 800246e:	d50b      	bpl.n	8002488 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002470:	f06f 0202 	mvn.w	r2, #2
 8002474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002476:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002478:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800247c:	079b      	lsls	r3, r3, #30
 800247e:	d077      	beq.n	8002570 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002480:	f7ff ffea 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002484:	2300      	movs	r3, #0
 8002486:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	0750      	lsls	r0, r2, #29
 800248e:	d510      	bpl.n	80024b2 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	0751      	lsls	r1, r2, #29
 8002494:	d50d      	bpl.n	80024b2 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002496:	f06f 0204 	mvn.w	r2, #4
 800249a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800249c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a8:	d068      	beq.n	800257c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	f7ff ffd5 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	2300      	movs	r3, #0
 80024b0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	0712      	lsls	r2, r2, #28
 80024b8:	d50f      	bpl.n	80024da <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	0710      	lsls	r0, r2, #28
 80024be:	d50c      	bpl.n	80024da <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c0:	f06f 0208 	mvn.w	r2, #8
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c6:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ca:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024cc:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80024ce:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d0:	d05a      	beq.n	8002588 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	f7ff ffc1 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	2300      	movs	r3, #0
 80024d8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	06d2      	lsls	r2, r2, #27
 80024e0:	d510      	bpl.n	8002504 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	06d0      	lsls	r0, r2, #27
 80024e6:	d50d      	bpl.n	8002504 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024e8:	f06f 0210 	mvn.w	r2, #16
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ee:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80024f8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024fa:	d04b      	beq.n	8002594 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80024fc:	f7ff ffac 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002500:	2300      	movs	r3, #0
 8002502:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	07d1      	lsls	r1, r2, #31
 800250a:	d508      	bpl.n	800251e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	07d2      	lsls	r2, r2, #31
 8002510:	d505      	bpl.n	800251e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002512:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002516:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002518:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800251a:	f000 fe95 	bl	8003248 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	0610      	lsls	r0, r2, #24
 8002524:	d508      	bpl.n	8002538 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	0611      	lsls	r1, r2, #24
 800252a:	d505      	bpl.n	8002538 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800252c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002530:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002532:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002534:	f000 f975 	bl	8002822 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	0652      	lsls	r2, r2, #25
 800253e:	d508      	bpl.n	8002552 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	0650      	lsls	r0, r2, #25
 8002544:	d505      	bpl.n	8002552 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002546:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800254a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800254c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800254e:	f7ff ff85 	bl	800245c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	0691      	lsls	r1, r2, #26
 8002558:	d522      	bpl.n	80025a0 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	0692      	lsls	r2, r2, #26
 800255e:	d51f      	bpl.n	80025a0 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002560:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002564:	4620      	mov	r0, r4
}
 8002566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800256a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800256c:	f000 b958 	b.w	8002820 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002570:	f7ff ff71 	bl	8002456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff ff70 	bl	800245a <HAL_TIM_PWM_PulseFinishedCallback>
 800257a:	e783      	b.n	8002484 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257c:	f7ff ff6b 	bl	8002456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	4620      	mov	r0, r4
 8002582:	f7ff ff6a 	bl	800245a <HAL_TIM_PWM_PulseFinishedCallback>
 8002586:	e792      	b.n	80024ae <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002588:	f7ff ff65 	bl	8002456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff ff64 	bl	800245a <HAL_TIM_PWM_PulseFinishedCallback>
 8002592:	e7a0      	b.n	80024d6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002594:	f7ff ff5f 	bl	8002456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff ff5e 	bl	800245a <HAL_TIM_PWM_PulseFinishedCallback>
 800259e:	e7af      	b.n	8002500 <HAL_TIM_IRQHandler+0xa2>
 80025a0:	bd10      	pop	{r4, pc}
	...

080025a4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a4:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80025a6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a8:	4290      	cmp	r0, r2
 80025aa:	d00a      	beq.n	80025c2 <TIM_Base_SetConfig+0x1e>
 80025ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025b0:	d007      	beq.n	80025c2 <TIM_Base_SetConfig+0x1e>
 80025b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025b6:	4290      	cmp	r0, r2
 80025b8:	d003      	beq.n	80025c2 <TIM_Base_SetConfig+0x1e>
 80025ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025be:	4290      	cmp	r0, r2
 80025c0:	d115      	bne.n	80025ee <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80025c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025c8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <TIM_Base_SetConfig+0x6c>)
 80025cc:	4290      	cmp	r0, r2
 80025ce:	d00a      	beq.n	80025e6 <TIM_Base_SetConfig+0x42>
 80025d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025d4:	d007      	beq.n	80025e6 <TIM_Base_SetConfig+0x42>
 80025d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025da:	4290      	cmp	r0, r2
 80025dc:	d003      	beq.n	80025e6 <TIM_Base_SetConfig+0x42>
 80025de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025e2:	4290      	cmp	r0, r2
 80025e4:	d103      	bne.n	80025ee <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80025e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ec:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80025ee:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80025f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80025f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80025f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	688b      	ldr	r3, [r1, #8]
 80025fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80025fc:	680b      	ldr	r3, [r1, #0]
 80025fe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <TIM_Base_SetConfig+0x6c>)
 8002602:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002604:	bf04      	itt	eq
 8002606:	690b      	ldreq	r3, [r1, #16]
 8002608:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800260a:	2301      	movs	r3, #1
 800260c:	6143      	str	r3, [r0, #20]
 800260e:	4770      	bx	lr
 8002610:	40012c00 	.word	0x40012c00

08002614 <HAL_TIM_Base_Init>:
{
 8002614:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002616:	4604      	mov	r4, r0
 8002618:	b1a0      	cbz	r0, 8002644 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800261a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800261e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002622:	b91b      	cbnz	r3, 800262c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002624:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002628:	f001 f844 	bl	80036b4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800262c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002630:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002634:	1d21      	adds	r1, r4, #4
 8002636:	f7ff ffb5 	bl	80025a4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800263a:	2301      	movs	r3, #1
  return HAL_OK;
 800263c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800263e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002642:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002644:	2001      	movs	r0, #1
}
 8002646:	bd10      	pop	{r4, pc}

08002648 <HAL_TIM_PWM_Init>:
{
 8002648:	b510      	push	{r4, lr}
  if(htim == NULL)
 800264a:	4604      	mov	r4, r0
 800264c:	b1a0      	cbz	r0, 8002678 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800264e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002652:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002656:	b91b      	cbnz	r3, 8002660 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002658:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800265c:	f7ff fe41 	bl	80022e2 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002660:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002662:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002668:	1d21      	adds	r1, r4, #4
 800266a:	f7ff ff9b 	bl	80025a4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800266e:	2301      	movs	r3, #1
  return HAL_OK;
 8002670:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002672:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002676:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002678:	2001      	movs	r0, #1
}
 800267a:	bd10      	pop	{r4, pc}

0800267c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800267c:	6a03      	ldr	r3, [r0, #32]
{
 800267e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002680:	f023 0310 	bic.w	r3, r3, #16
 8002684:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002686:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002688:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800268a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800268c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800268e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002692:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002696:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002698:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800269c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026a0:	4d0b      	ldr	r5, [pc, #44]	; (80026d0 <TIM_OC2_SetConfig+0x54>)
 80026a2:	42a8      	cmp	r0, r5
 80026a4:	d10d      	bne.n	80026c2 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80026a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80026b0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80026b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026b4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80026b8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80026ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80026be:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80026c2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80026c4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80026c6:	684a      	ldr	r2, [r1, #4]
 80026c8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80026ca:	6203      	str	r3, [r0, #32]
 80026cc:	bd70      	pop	{r4, r5, r6, pc}
 80026ce:	bf00      	nop
 80026d0:	40012c00 	.word	0x40012c00

080026d4 <HAL_TIM_PWM_ConfigChannel>:
{
 80026d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80026d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80026da:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80026dc:	2b01      	cmp	r3, #1
 80026de:	f04f 0002 	mov.w	r0, #2
 80026e2:	d025      	beq.n	8002730 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80026e4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80026e6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80026ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80026ee:	2a0c      	cmp	r2, #12
 80026f0:	d818      	bhi.n	8002724 <HAL_TIM_PWM_ConfigChannel+0x50>
 80026f2:	e8df f002 	tbb	[pc, r2]
 80026f6:	1707      	.short	0x1707
 80026f8:	171e1717 	.word	0x171e1717
 80026fc:	172f1717 	.word	0x172f1717
 8002700:	1717      	.short	0x1717
 8002702:	40          	.byte	0x40
 8002703:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002704:	6820      	ldr	r0, [r4, #0]
 8002706:	f7ff fd6d 	bl	80021e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800270a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800270c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	f042 0208 	orr.w	r2, r2, #8
 8002714:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	f022 0204 	bic.w	r2, r2, #4
 800271c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002722:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002724:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002726:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002728:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800272c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002730:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002732:	6820      	ldr	r0, [r4, #0]
 8002734:	f7ff ffa2 	bl	800267c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002738:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800273a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002752:	e7e6      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002754:	6820      	ldr	r0, [r4, #0]
 8002756:	f7ff fd6d 	bl	8002234 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800275a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800275c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	f042 0208 	orr.w	r2, r2, #8
 8002764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	f022 0204 	bic.w	r2, r2, #4
 800276c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002772:	61da      	str	r2, [r3, #28]
    break;
 8002774:	e7d6      	b.n	8002724 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002776:	6820      	ldr	r0, [r4, #0]
 8002778:	f7ff fd86 	bl	8002288 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800277c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800277e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002780:	69da      	ldr	r2, [r3, #28]
 8002782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002786:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002796:	e7ec      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002798 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002798:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800279a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800279c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800279e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80027a0:	ea23 0304 	bic.w	r3, r3, r4
 80027a4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80027a6:	6a03      	ldr	r3, [r0, #32]
 80027a8:	408a      	lsls	r2, r1
 80027aa:	431a      	orrs	r2, r3
 80027ac:	6202      	str	r2, [r0, #32]
 80027ae:	bd10      	pop	{r4, pc}

080027b0 <HAL_TIM_PWM_Start>:
{
 80027b0:	b510      	push	{r4, lr}
 80027b2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027b4:	2201      	movs	r2, #1
 80027b6:	6800      	ldr	r0, [r0, #0]
 80027b8:	f7ff ffee 	bl	8002798 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <HAL_TIM_PWM_Start+0x28>)
}
 80027c0:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027c2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80027c4:	bf02      	ittt	eq
 80027c6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80027c8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80027cc:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bd10      	pop	{r4, pc}
 80027d8:	40012c00 	.word	0x40012c00

080027dc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80027dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80027e0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f04f 0302 	mov.w	r3, #2
 80027e8:	d018      	beq.n	800281c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80027ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80027ee:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80027f0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80027f2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80027f4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80027f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027fa:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4322      	orrs	r2, r4
 8002800:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002810:	2301      	movs	r3, #1
 8002812:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002816:	2300      	movs	r3, #0
 8002818:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800281c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800281e:	bd10      	pop	{r4, pc}

08002820 <HAL_TIMEx_CommutationCallback>:
 8002820:	4770      	bx	lr

08002822 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002822:	4770      	bx	lr

08002824 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002824:	6803      	ldr	r3, [r0, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800282c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002836:	2320      	movs	r3, #32
 8002838:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800283c:	4770      	bx	lr
	...

08002840 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002844:	6805      	ldr	r5, [r0, #0]
 8002846:	68c2      	ldr	r2, [r0, #12]
 8002848:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800284a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800284c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002850:	4313      	orrs	r3, r2
 8002852:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002854:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002856:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002858:	430b      	orrs	r3, r1
 800285a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800285c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002860:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002864:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002866:	4313      	orrs	r3, r2
 8002868:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800286a:	696b      	ldr	r3, [r5, #20]
 800286c:	6982      	ldr	r2, [r0, #24]
 800286e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002872:	4313      	orrs	r3, r2
 8002874:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <UART_SetConfig+0x138>)
{
 8002878:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800287a:	429d      	cmp	r5, r3
 800287c:	f04f 0419 	mov.w	r4, #25
 8002880:	d146      	bne.n	8002910 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002882:	f7ff fc9f 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 8002886:	fb04 f300 	mul.w	r3, r4, r0
 800288a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800288e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002892:	00b6      	lsls	r6, r6, #2
 8002894:	fbb3 f3f6 	udiv	r3, r3, r6
 8002898:	fbb3 f3f8 	udiv	r3, r3, r8
 800289c:	011e      	lsls	r6, r3, #4
 800289e:	f7ff fc91 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80028a2:	4360      	muls	r0, r4
 80028a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	fbb0 f7f3 	udiv	r7, r0, r3
 80028ae:	f7ff fc89 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80028b2:	4360      	muls	r0, r4
 80028b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	fbb3 f3f8 	udiv	r3, r3, r8
 80028c2:	fb08 7313 	mls	r3, r8, r3, r7
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	3332      	adds	r3, #50	; 0x32
 80028ca:	fbb3 f3f8 	udiv	r3, r3, r8
 80028ce:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80028d2:	f7ff fc77 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80028d6:	4360      	muls	r0, r4
 80028d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	fbb0 faf2 	udiv	sl, r0, r2
 80028e2:	f7ff fc6f 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028e6:	4360      	muls	r0, r4
 80028e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80028f6:	fb08 a313 	mls	r3, r8, r3, sl
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	fbb3 f3f8 	udiv	r3, r3, r8
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	433b      	orrs	r3, r7
 8002908:	4433      	add	r3, r6
 800290a:	60ab      	str	r3, [r5, #8]
 800290c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002910:	f7ff fc48 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002914:	fb04 f300 	mul.w	r3, r4, r0
 8002918:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800291c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002920:	00b6      	lsls	r6, r6, #2
 8002922:	fbb3 f3f6 	udiv	r3, r3, r6
 8002926:	fbb3 f3f8 	udiv	r3, r3, r8
 800292a:	011e      	lsls	r6, r3, #4
 800292c:	f7ff fc3a 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002930:	4360      	muls	r0, r4
 8002932:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fbb0 f7f3 	udiv	r7, r0, r3
 800293c:	f7ff fc32 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002940:	4360      	muls	r0, r4
 8002942:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fbb0 f3f3 	udiv	r3, r0, r3
 800294c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002950:	fb08 7313 	mls	r3, r8, r3, r7
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	3332      	adds	r3, #50	; 0x32
 8002958:	fbb3 f3f8 	udiv	r3, r3, r8
 800295c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002960:	f7ff fc20 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002964:	4360      	muls	r0, r4
 8002966:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	fbb0 faf2 	udiv	sl, r0, r2
 8002970:	f7ff fc18 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002974:	e7b7      	b.n	80028e6 <UART_SetConfig+0xa6>
 8002976:	bf00      	nop
 8002978:	40013800 	.word	0x40013800

0800297c <HAL_UART_Init>:
{
 800297c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800297e:	4604      	mov	r4, r0
 8002980:	b340      	cbz	r0, 80029d4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002982:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002986:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800298a:	b91b      	cbnz	r3, 8002994 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800298c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002990:	f000 ff80 	bl	8003894 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002996:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002998:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800299c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800299e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80029a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80029a6:	f7ff ff4b 	bl	8002840 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029aa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029bc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80029c6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80029ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80029ce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80029d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029d4:	2001      	movs	r0, #1
}
 80029d6:	bd10      	pop	{r4, pc}

080029d8 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80029d8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d120      	bne.n	8002a22 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80029e0:	b1e9      	cbz	r1, 8002a1e <HAL_UART_Receive_IT+0x46>
 80029e2:	b1e2      	cbz	r2, 8002a1e <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80029e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d01a      	beq.n	8002a22 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80029ec:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80029ee:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f0:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029fa:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80029fc:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029fe:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002a00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a04:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002a08:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a0a:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002a0c:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a0e:	f041 0101 	orr.w	r1, r1, #1
 8002a12:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a14:	68d1      	ldr	r1, [r2, #12]
 8002a16:	f041 0120 	orr.w	r1, r1, #32
 8002a1a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002a1c:	4770      	bx	lr
      return HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
 8002a20:	4770      	bx	lr
    return HAL_BUSY;
 8002a22:	2002      	movs	r0, #2
}
 8002a24:	4770      	bx	lr

08002a26 <HAL_UART_TxCpltCallback>:
 8002a26:	4770      	bx	lr

08002a28 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002a28:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002a2c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002a2e:	2b22      	cmp	r3, #34	; 0x22
 8002a30:	d136      	bne.n	8002aa0 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a32:	6883      	ldr	r3, [r0, #8]
 8002a34:	6901      	ldr	r1, [r0, #16]
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3a:	6802      	ldr	r2, [r0, #0]
 8002a3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a3e:	d123      	bne.n	8002a88 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a40:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a42:	b9e9      	cbnz	r1, 8002a80 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a48:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002a4c:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002a4e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002a50:	3c01      	subs	r4, #1
 8002a52:	b2a4      	uxth	r4, r4
 8002a54:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002a56:	b98c      	cbnz	r4, 8002a7c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a58:	6803      	ldr	r3, [r0, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	f022 0220 	bic.w	r2, r2, #32
 8002a60:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a68:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a72:	2320      	movs	r3, #32
 8002a74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002a78:	f000 fb8a 	bl	8003190 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002a7c:	2000      	movs	r0, #0
}
 8002a7e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f823 2b01 	strh.w	r2, [r3], #1
 8002a86:	e7e1      	b.n	8002a4c <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a88:	b921      	cbnz	r1, 8002a94 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a8a:	1c59      	adds	r1, r3, #1
 8002a8c:	6852      	ldr	r2, [r2, #4]
 8002a8e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e7dc      	b.n	8002a4e <UART_Receive_IT+0x26>
 8002a94:	6852      	ldr	r2, [r2, #4]
 8002a96:	1c59      	adds	r1, r3, #1
 8002a98:	6281      	str	r1, [r0, #40]	; 0x28
 8002a9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a9e:	e7f7      	b.n	8002a90 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002aa0:	2002      	movs	r0, #2
 8002aa2:	bd10      	pop	{r4, pc}

08002aa4 <HAL_UART_ErrorCallback>:
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aa8:	6803      	ldr	r3, [r0, #0]
{
 8002aaa:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aac:	681a      	ldr	r2, [r3, #0]
{
 8002aae:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002ab0:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab2:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ab4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002ab6:	d107      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab8:	0696      	lsls	r6, r2, #26
 8002aba:	d55a      	bpl.n	8002b72 <HAL_UART_IRQHandler+0xca>
 8002abc:	068d      	lsls	r5, r1, #26
 8002abe:	d558      	bpl.n	8002b72 <HAL_UART_IRQHandler+0xca>
}
 8002ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002ac4:	f7ff bfb0 	b.w	8002a28 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ac8:	f015 0501 	ands.w	r5, r5, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x2c>
 8002ace:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002ad2:	d04e      	beq.n	8002b72 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ad4:	07d3      	lsls	r3, r2, #31
 8002ad6:	d505      	bpl.n	8002ae4 <HAL_UART_IRQHandler+0x3c>
 8002ad8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ada:	bf42      	ittt	mi
 8002adc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002ade:	f043 0301 	orrmi.w	r3, r3, #1
 8002ae2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae4:	0750      	lsls	r0, r2, #29
 8002ae6:	d504      	bpl.n	8002af2 <HAL_UART_IRQHandler+0x4a>
 8002ae8:	b11d      	cbz	r5, 8002af2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af2:	0793      	lsls	r3, r2, #30
 8002af4:	d504      	bpl.n	8002b00 <HAL_UART_IRQHandler+0x58>
 8002af6:	b11d      	cbz	r5, 8002b00 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b00:	0716      	lsls	r6, r2, #28
 8002b02:	d504      	bpl.n	8002b0e <HAL_UART_IRQHandler+0x66>
 8002b04:	b11d      	cbz	r5, 8002b0e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b08:	f043 0308 	orr.w	r3, r3, #8
 8002b0c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d066      	beq.n	8002be2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b14:	0695      	lsls	r5, r2, #26
 8002b16:	d504      	bpl.n	8002b22 <HAL_UART_IRQHandler+0x7a>
 8002b18:	0688      	lsls	r0, r1, #26
 8002b1a:	d502      	bpl.n	8002b22 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7ff ff83 	bl	8002a28 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b22:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002b24:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b26:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b2a:	0711      	lsls	r1, r2, #28
 8002b2c:	d402      	bmi.n	8002b34 <HAL_UART_IRQHandler+0x8c>
 8002b2e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002b32:	d01a      	beq.n	8002b6a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002b34:	f7ff fe76 	bl	8002824 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	0652      	lsls	r2, r2, #25
 8002b3e:	d510      	bpl.n	8002b62 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b40:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002b42:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b48:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002b4a:	b150      	cbz	r0, 8002b62 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_UART_IRQHandler+0x13c>)
 8002b4e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b50:	f7fe fb7c 	bl	800124c <HAL_DMA_Abort_IT>
 8002b54:	2800      	cmp	r0, #0
 8002b56:	d044      	beq.n	8002be2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b58:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b60:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7ff ff9e 	bl	8002aa4 <HAL_UART_ErrorCallback>
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002b6a:	f7ff ff9b 	bl	8002aa4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002b70:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b72:	0616      	lsls	r6, r2, #24
 8002b74:	d527      	bpl.n	8002bc6 <HAL_UART_IRQHandler+0x11e>
 8002b76:	060d      	lsls	r5, r1, #24
 8002b78:	d525      	bpl.n	8002bc6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b7a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002b7e:	2a21      	cmp	r2, #33	; 0x21
 8002b80:	d12f      	bne.n	8002be2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b82:	68a2      	ldr	r2, [r4, #8]
 8002b84:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b88:	6a22      	ldr	r2, [r4, #32]
 8002b8a:	d117      	bne.n	8002bbc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b8c:	8811      	ldrh	r1, [r2, #0]
 8002b8e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002b92:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002b94:	6921      	ldr	r1, [r4, #16]
 8002b96:	b979      	cbnz	r1, 8002bb8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002b98:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002b9a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002b9c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002b9e:	3a01      	subs	r2, #1
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002ba4:	b9ea      	cbnz	r2, 8002be2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bac:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002bb8:	3201      	adds	r2, #1
 8002bba:	e7ee      	b.n	8002b9a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bbc:	1c51      	adds	r1, r2, #1
 8002bbe:	6221      	str	r1, [r4, #32]
 8002bc0:	7812      	ldrb	r2, [r2, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	e7ea      	b.n	8002b9c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bc6:	0650      	lsls	r0, r2, #25
 8002bc8:	d50b      	bpl.n	8002be2 <HAL_UART_IRQHandler+0x13a>
 8002bca:	064a      	lsls	r2, r1, #25
 8002bcc:	d509      	bpl.n	8002be2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bce:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002bd0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002bde:	f7ff ff22 	bl	8002a26 <HAL_UART_TxCpltCallback>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	08002be9 	.word	0x08002be9

08002be8 <UART_DMAAbortOnError>:
{
 8002be8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002bea:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002bee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bf0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002bf2:	f7ff ff57 	bl	8002aa4 <HAL_UART_ErrorCallback>
 8002bf6:	bd08      	pop	{r3, pc}

08002bf8 <MPU6050_ReadOneByte>:
//������ ���� 1����Ʈ �б� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪

uint8_t MPU6050_ReadOneByte(uint8_t RegAddr)
{
 8002bf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t Data = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	aa06      	add	r2, sp, #24
 8002bfe:	f802 3d01 	strb.w	r3, [r2, #-1]!
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,1,&Data,1,1000);
 8002c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	21d0      	movs	r1, #208	; 0xd0
 8002c0c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002c10:	4602      	mov	r2, r0
 8002c12:	4804      	ldr	r0, [pc, #16]	; (8002c24 <MPU6050_ReadOneByte+0x2c>)
 8002c14:	f7fe ff26 	bl	8001a64 <HAL_I2C_Mem_Read>
	return Data;
}
 8002c18:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002c1c:	b007      	add	sp, #28
 8002c1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c22:	bf00      	nop
 8002c24:	20000078 	.word	0x20000078

08002c28 <MPU6050_WriteOneByte>:

//������  1����Ʈ ���� 
// �Ķ����1 : ���� ��巹��, �Ķ���� 2 : ������ �������� ��巹��
// ���ϰ� : �������䰪
void MPU6050_WriteOneByte(uint8_t RegAddr, uint8_t Data)
{
 8002c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,&Data,1,1000);
 8002c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8002c2e:	aa06      	add	r2, sp, #24
 8002c30:	f802 1d01 	strb.w	r1, [r2, #-1]!
	HAL_I2C_Mem_Write(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,&Data,1,1000);
 8002c34:	9302      	str	r3, [sp, #8]
 8002c36:	2301      	movs	r3, #1
 8002c38:	21d0      	movs	r1, #208	; 0xd0
 8002c3a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <MPU6050_WriteOneByte+0x24>)
 8002c42:	f7fe fe79 	bl	8001938 <HAL_I2C_Mem_Write>
}
 8002c46:	b007      	add	sp, #28
 8002c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c4c:	20000078 	.word	0x20000078

08002c50 <MPU6050_WriteBits>:

bool MPU6050_WriteBits(uint8_t RegAddr, uint8_t BitStart, uint8_t Length, uint8_t Data)
{
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	4614      	mov	r4, r2
 8002c54:	461d      	mov	r5, r3
 8002c56:	460f      	mov	r7, r1
 8002c58:	4606      	mov	r6, r0

   uint8_t Dat, Mask;
    
		Dat = MPU6050_ReadOneByte(RegAddr);
 8002c5a:	f7ff ffcd 	bl	8002bf8 <MPU6050_ReadOneByte>
    Mask = (0xFF << (BitStart + 1)) | 0xFF >> ((8 - BitStart) + Length - 1);
    Data <<= (8 - Length);
 8002c5e:	f1c4 0308 	rsb	r3, r4, #8
 8002c62:	409d      	lsls	r5, r3
    Data >>= (7 - BitStart);
 8002c64:	f1c7 0107 	rsb	r1, r7, #7
 8002c68:	b2ed      	uxtb	r5, r5
 8002c6a:	410d      	asrs	r5, r1
    Mask = (0xFF << (BitStart + 1)) | 0xFF >> ((8 - BitStart) + Length - 1);
 8002c6c:	21ff      	movs	r1, #255	; 0xff
 8002c6e:	1be4      	subs	r4, r4, r7
 8002c70:	3407      	adds	r4, #7
 8002c72:	3701      	adds	r7, #1
 8002c74:	fa01 f707 	lsl.w	r7, r1, r7
 8002c78:	fa41 f404 	asr.w	r4, r1, r4
 8002c7c:	433c      	orrs	r4, r7
    Dat &= Mask;
 8002c7e:	4020      	ands	r0, r4
    Dat |= Data;
 8002c80:	4328      	orrs	r0, r5
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002c82:	b2c1      	uxtb	r1, r0
 8002c84:	4630      	mov	r0, r6
 8002c86:	f7ff ffcf 	bl	8002c28 <MPU6050_WriteOneByte>
    
    return true;
}
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c8e <MPU6050_WriteOneBit>:

bool MPU6050_WriteOneBit(uint8_t RegAddr, uint8_t BitNum, uint8_t Data)
{
 8002c8e:	b570      	push	{r4, r5, r6, lr}
 8002c90:	4616      	mov	r6, r2
 8002c92:	4605      	mov	r5, r0
 8002c94:	460c      	mov	r4, r1
    uint8_t Dat;
    
    Dat = MPU6050_ReadOneByte(RegAddr);
 8002c96:	f7ff ffaf 	bl	8002bf8 <MPU6050_ReadOneByte>
 8002c9a:	2301      	movs	r3, #1
    Dat = (Data != 0) ? (Dat | (1 << BitNum)) : (Dat & ~(1 << BitNum));
 8002c9c:	b146      	cbz	r6, 8002cb0 <MPU6050_WriteOneBit+0x22>
 8002c9e:	fa03 f104 	lsl.w	r1, r3, r4
 8002ca2:	4301      	orrs	r1, r0
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002ca4:	4628      	mov	r0, r5
    Dat = (Data != 0) ? (Dat | (1 << BitNum)) : (Dat & ~(1 << BitNum));
 8002ca6:	b2c9      	uxtb	r1, r1
    MPU6050_WriteOneByte(RegAddr, Dat);
 8002ca8:	f7ff ffbe 	bl	8002c28 <MPU6050_WriteOneByte>
    
    return true;
}
 8002cac:	2001      	movs	r0, #1
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
    Dat = (Data != 0) ? (Dat | (1 << BitNum)) : (Dat & ~(1 << BitNum));
 8002cb0:	40a3      	lsls	r3, r4
 8002cb2:	ea20 0103 	bic.w	r1, r0, r3
 8002cb6:	e7f5      	b.n	8002ca4 <MPU6050_WriteOneBit+0x16>

08002cb8 <MPU6050_ReadBuff>:

//�����б� (����̽� ��巹��, �������� ��巹��, ������ ũ��, ���� ������)
bool MPU6050_ReadBuff(uint8_t RegAddr, uint8_t Num, uint8_t *pBuff)
{
 8002cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// �޸� �б�(����̽� ��巹��, 8��Ʈ ��巹�� �޸� ũ��, ���� ������, ���ۼ���, �õ�Ƚ��)
	return HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,pBuff,Num,1000);
 8002cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cbe:	9101      	str	r1, [sp, #4]
 8002cc0:	9302      	str	r3, [sp, #8]
 8002cc2:	9200      	str	r2, [sp, #0]
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	21d0      	movs	r1, #208	; 0xd0
 8002cca:	4804      	ldr	r0, [pc, #16]	; (8002cdc <MPU6050_ReadBuff+0x24>)
 8002ccc:	f7fe feca 	bl	8001a64 <HAL_I2C_Mem_Read>
}
 8002cd0:	3000      	adds	r0, #0
 8002cd2:	bf18      	it	ne
 8002cd4:	2001      	movne	r0, #1
 8002cd6:	b005      	add	sp, #20
 8002cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cdc:	20000078 	.word	0x20000078

08002ce0 <MPU6050_SetClockSource>:
  	*pOutVal >>= 3;
}

void MPU6050_SetClockSource(uint8_t source)
{
    MPU6050_WriteBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	206b      	movs	r0, #107	; 0x6b
 8002ce8:	f7ff bfb2 	b.w	8002c50 <MPU6050_WriteBits>

08002cec <MPU6050_SetFullScaleGyroRange>:
}

void MPU6050_SetFullScaleGyroRange(uint8_t range)
{
    MPU6050_WriteBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8002cec:	4603      	mov	r3, r0
 8002cee:	2202      	movs	r2, #2
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	201b      	movs	r0, #27
 8002cf4:	f7ff bfac 	b.w	8002c50 <MPU6050_WriteBits>

08002cf8 <MPU6050_SetLPF>:
}

void MPU6050_SetLPF(uint8_t	LowPassFilter)
{
   MPU6050_WriteOneByte(MPU6050_RA_CONFIG, LowPassFilter);
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	201a      	movs	r0, #26
 8002cfc:	f7ff bf94 	b.w	8002c28 <MPU6050_WriteOneByte>

08002d00 <MPU6050_SetFullScaleAccelRange>:
}

void MPU6050_SetFullScaleAccelRange(uint8_t range)
{
    MPU6050_WriteBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002d00:	4603      	mov	r3, r0
 8002d02:	2202      	movs	r2, #2
 8002d04:	2104      	movs	r1, #4
 8002d06:	201c      	movs	r0, #28
 8002d08:	f7ff bfa2 	b.w	8002c50 <MPU6050_WriteBits>

08002d0c <MPU6050_SetSleepEnabled>:
}

void MPU6050_SetSleepEnabled(uint8_t enabled) 
{
    MPU6050_WriteOneBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	2106      	movs	r1, #6
 8002d10:	206b      	movs	r0, #107	; 0x6b
 8002d12:	f7ff bfbc 	b.w	8002c8e <MPU6050_WriteOneBit>

08002d16 <MPU6050_SetI2CMasterModeEnabled>:
}

void MPU6050_SetI2CMasterModeEnabled(uint8_t enabled) 
{
    MPU6050_WriteOneBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8002d16:	4602      	mov	r2, r0
 8002d18:	2105      	movs	r1, #5
 8002d1a:	206a      	movs	r0, #106	; 0x6a
 8002d1c:	f7ff bfb7 	b.w	8002c8e <MPU6050_WriteOneBit>

08002d20 <MPU6050_SetI2CBypassEnabled>:
}

void MPU6050_SetI2CBypassEnabled(uint8_t enabled) 
{
    MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8002d20:	4602      	mov	r2, r0
 8002d22:	2101      	movs	r1, #1
 8002d24:	2037      	movs	r0, #55	; 0x37
 8002d26:	f7ff bfb2 	b.w	8002c8e <MPU6050_WriteOneBit>

08002d2a <MPU6050_GetData>:
}

void MPU6050_GetData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* tmpr) 
{
 8002d2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t Buffer[14] = {0};
 8002d2e:	f04f 080e 	mov.w	r8, #14
{
 8002d32:	b085      	sub	sp, #20
 8002d34:	4606      	mov	r6, r0
 8002d36:	460d      	mov	r5, r1
 8002d38:	4614      	mov	r4, r2
	uint8_t Buffer[14] = {0};
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	4668      	mov	r0, sp
{
 8002d40:	461f      	mov	r7, r3
	uint8_t Buffer[14] = {0};
 8002d42:	f000 fe77 	bl	8003a34 <memset>
	int16_t InBuffer[7] = {0};
	int16_t temp;

	MPU6050_ReadBuff(MPU6050_RA_ACCEL_XOUT_H, 14, Buffer);
 8002d46:	466a      	mov	r2, sp
 8002d48:	4641      	mov	r1, r8
 8002d4a:	203b      	movs	r0, #59	; 0x3b
 8002d4c:	f7ff ffb4 	bl	8002cb8 <MPU6050_ReadBuff>
	InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
	InBuffer[1] = (((int16_t)Buffer[2]) << 8) | Buffer[3];
 8002d50:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002d54:	f89d 8003 	ldrb.w	r8, [sp, #3]
	InBuffer[2] = (((int16_t)Buffer[4]) << 8) | Buffer[5];
 8002d58:	f89d c005 	ldrb.w	ip, [sp, #5]
	InBuffer[1] = (((int16_t)Buffer[2]) << 8) | Buffer[3];
 8002d5c:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
	InBuffer[2] = (((int16_t)Buffer[4]) << 8) | Buffer[5];
 8002d60:	f89d 3004 	ldrb.w	r3, [sp, #4]

	InBuffer[3] = (((int16_t)Buffer[8]) << 8) | Buffer[9];
 8002d64:	f89d e009 	ldrb.w	lr, [sp, #9]
	InBuffer[2] = (((int16_t)Buffer[4]) << 8) | Buffer[5];
 8002d68:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
	InBuffer[3] = (((int16_t)Buffer[8]) << 8) | Buffer[9];
 8002d6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	InBuffer[4] = (((int16_t)Buffer[10]) << 8) | Buffer[11];
 8002d70:	f89d 000b 	ldrb.w	r0, [sp, #11]
	InBuffer[3] = (((int16_t)Buffer[8]) << 8) | Buffer[9];
 8002d74:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
	InBuffer[4] = (((int16_t)Buffer[10]) << 8) | Buffer[11];
 8002d78:	f89d 300a 	ldrb.w	r3, [sp, #10]
	InBuffer[5] = (((int16_t)Buffer[12]) << 8) | Buffer[13];
 8002d7c:	f89d 200c 	ldrb.w	r2, [sp, #12]
	InBuffer[4] = (((int16_t)Buffer[10]) << 8) | Buffer[11];
 8002d80:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	InBuffer[5] = (((int16_t)Buffer[12]) << 8) | Buffer[13];
 8002d84:	f89d 300d 	ldrb.w	r3, [sp, #13]
	
	temp = (((int16_t)Buffer[6]) << 8) | Buffer[7];
 8002d88:	f89d 1006 	ldrb.w	r1, [sp, #6]
	InBuffer[5] = (((int16_t)Buffer[12]) << 8) | Buffer[13];
 8002d8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	temp = (((int16_t)Buffer[6]) << 8) | Buffer[7];
 8002d90:	f89d 2007 	ldrb.w	r2, [sp, #7]
	InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
 8002d94:	f89d 9000 	ldrb.w	r9, [sp]
	temp = (((int16_t)Buffer[6]) << 8) | Buffer[7];
 8002d98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	InBuffer[6] = (int16_t)(temp* 10L / 34) + 3653;
 8002d9c:	b211      	sxth	r1, r2
 8002d9e:	220a      	movs	r2, #10
 8002da0:	434a      	muls	r2, r1
 8002da2:	2122      	movs	r1, #34	; 0x22
 8002da4:	fb92 f2f1 	sdiv	r2, r2, r1
	InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
 8002da8:	f89d 1001 	ldrb.w	r1, [sp, #1]
	InBuffer[6] = (int16_t)(temp* 10L / 34) + 3653;
 8002dac:	f602 6245 	addw	r2, r2, #3653	; 0xe45
	InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
 8002db0:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
	
	*ax = *(InBuffer + 0);
 8002db4:	8031      	strh	r1, [r6, #0]
	*ay = *(InBuffer + 1);
	*az = *(InBuffer + 2);
	*gx = *(InBuffer + 3);
	*gy = *(InBuffer + 4);
 8002db6:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ay = *(InBuffer + 1);
 8002db8:	f8a5 8000 	strh.w	r8, [r5]
	*az = *(InBuffer + 2);
 8002dbc:	f8a4 c000 	strh.w	ip, [r4]
	*gx = *(InBuffer + 3);
 8002dc0:	f8a7 e000 	strh.w	lr, [r7]
	*gy = *(InBuffer + 4);
 8002dc4:	8008      	strh	r0, [r1, #0]
	*gz = *(InBuffer + 5);
 8002dc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002dc8:	800b      	strh	r3, [r1, #0]
	*tmpr = *(InBuffer + 6);
 8002dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dcc:	801a      	strh	r2, [r3, #0]
}
 8002dce:	b005      	add	sp, #20
 8002dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002dd4 <MPU6050_Init>:
	MPU6050_GyroOffset.Z = TempGz >> 5;

}

void MPU6050_Init(uint8_t	lpf)
{
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
  MPU6050_SetClockSource(MPU6050_CLOCK_PLL_XGYRO); 
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f7ff ff81 	bl	8002ce0 <MPU6050_SetClockSource>
  MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7ff ff84 	bl	8002cec <MPU6050_SetFullScaleGyroRange>
  MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7ff ff8b 	bl	8002d00 <MPU6050_SetFullScaleAccelRange>
		MPU6050_DLPF_BW_42          0x03
		MPU6050_DLPF_BW_20          0x04
		MPU6050_DLPF_BW_10          0x05
		MPU6050_DLPF_BW_5           0x06
	 */
  MPU6050_SetLPF(lpf);
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff ff84 	bl	8002cf8 <MPU6050_SetLPF>

  MPU6050_SetSleepEnabled(0); 
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7ff ff8b 	bl	8002d0c <MPU6050_SetSleepEnabled>
  MPU6050_SetI2CMasterModeEnabled(0);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7ff ff8d 	bl	8002d16 <MPU6050_SetI2CMasterModeEnabled>
  MPU6050_SetI2CBypassEnabled(1);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f7ff ff8f 	bl	8002d20 <MPU6050_SetI2CBypassEnabled>

  MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2107      	movs	r1, #7
 8002e06:	2037      	movs	r0, #55	; 0x37
 8002e08:	f7ff ff41 	bl	8002c8e <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2106      	movs	r1, #6
 8002e10:	2037      	movs	r0, #55	; 0x37
 8002e12:	f7ff ff3c 	bl	8002c8e <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, 1);
 8002e16:	2201      	movs	r2, #1
 8002e18:	2105      	movs	r1, #5
 8002e1a:	2037      	movs	r0, #55	; 0x37
 8002e1c:	f7ff ff37 	bl	8002c8e <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, 1);
 8002e20:	2201      	movs	r2, #1
 8002e22:	2104      	movs	r1, #4
 8002e24:	2037      	movs	r0, #55	; 0x37
 8002e26:	f7ff ff32 	bl	8002c8e <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, 1);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2038      	movs	r0, #56	; 0x38
 8002e30:	f7ff ff2d 	bl	8002c8e <MPU6050_WriteOneBit>
  HAL_Delay(100);  // ���̷� ����ȭ ���
}
 8002e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(100);  // ���̷� ����ȭ ���
 8002e38:	2064      	movs	r0, #100	; 0x64
 8002e3a:	f7fe b98d 	b.w	8001158 <HAL_Delay>
	...

08002e40 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	2210      	movs	r2, #16
{
 8002e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e46:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	eb0d 0002 	add.w	r0, sp, r2
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f000 fdf1 	bl	8003a34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e52:	4b26      	ldr	r3, [pc, #152]	; (8002eec <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002e54:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8002ef4 <MX_GPIO_Init+0xb4>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e58:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8002e5a:	4c25      	ldr	r4, [pc, #148]	; (8002ef0 <MX_GPIO_Init+0xb0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	619a      	str	r2, [r3, #24]
 8002e62:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002e64:	4640      	mov	r0, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	f002 0220 	and.w	r2, r2, #32
 8002e6a:	9200      	str	r2, [sp, #0]
 8002e6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002e70:	2133      	movs	r1, #51	; 0x33
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e72:	f042 0210 	orr.w	r2, r2, #16
 8002e76:	619a      	str	r2, [r3, #24]
 8002e78:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7c:	f002 0210 	and.w	r2, r2, #16
 8002e80:	9201      	str	r2, [sp, #4]
 8002e82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e84:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e88:	f042 0208 	orr.w	r2, r2, #8
 8002e8c:	619a      	str	r2, [r3, #24]
 8002e8e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e92:	f002 0208 	and.w	r2, r2, #8
 8002e96:	9202      	str	r2, [sp, #8]
 8002e98:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	f042 0204 	orr.w	r2, r2, #4
 8002ea0:	619a      	str	r2, [r3, #24]
 8002ea2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	9303      	str	r3, [sp, #12]
 8002eac:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002eae:	f7fe faf5 	bl	800149c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	f240 2123 	movw	r1, #547	; 0x223
 8002eba:	f7fe faef 	bl	800149c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002ebe:	2333      	movs	r3, #51	; 0x33
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec0:	a904      	add	r1, sp, #16
 8002ec2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002ec4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ecc:	f7fe fa06 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_9;
 8002ed0:	f240 2323 	movw	r3, #547	; 0x223
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed4:	a904      	add	r1, sp, #16
 8002ed6:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_9;
 8002ed8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	f7fe f9fc 	bl	80012dc <HAL_GPIO_Init>

}
 8002ee4:	b008      	add	sp, #32
 8002ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40010c00 	.word	0x40010c00
 8002ef4:	40011000 	.word	0x40011000

08002ef8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002ef8:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8002efa:	480c      	ldr	r0, [pc, #48]	; (8002f2c <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 400000;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_I2C2_Init+0x38>)
 8002efe:	f8df e034 	ldr.w	lr, [pc, #52]	; 8002f34 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 8002f06:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f0a:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f0c:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f0e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002f10:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f12:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002f14:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f16:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f18:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f1a:	f7fe fc8d 	bl	8001838 <HAL_I2C_Init>
 8002f1e:	b118      	cbz	r0, 8002f28 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 8002f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002f24:	f000 bb28 	b.w	8003578 <Error_Handler>
 8002f28:	bd08      	pop	{r3, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000078 	.word	0x20000078
 8002f30:	40005800 	.word	0x40005800
 8002f34:	00061a80 	.word	0x00061a80

08002f38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3e:	2210      	movs	r2, #16
 8002f40:	2100      	movs	r1, #0
 8002f42:	a802      	add	r0, sp, #8
 8002f44:	f000 fd76 	bl	8003a34 <memset>
  if(i2cHandle->Instance==I2C2)
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_I2C_MspInit+0x58>)
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d11d      	bne.n	8002f8c <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f50:	4c10      	ldr	r4, [pc, #64]	; (8002f94 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f52:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f54:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	4810      	ldr	r0, [pc, #64]	; (8002f98 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f58:	f043 0308 	orr.w	r3, r3, #8
 8002f5c:	61a3      	str	r3, [r4, #24]
 8002f5e:	69a3      	ldr	r3, [r4, #24]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f6c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f6e:	2312      	movs	r3, #18
 8002f70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f76:	f7fe f9b1 	bl	80012dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f7a:	69e3      	ldr	r3, [r4, #28]
 8002f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f80:	61e3      	str	r3, [r4, #28]
 8002f82:	69e3      	ldr	r3, [r4, #28]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002f8c:	b006      	add	sp, #24
 8002f8e:	bd10      	pop	{r4, pc}
 8002f90:	40005800 	.word	0x40005800
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010c00 	.word	0x40010c00

08002f9c <setPoint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPoint(PID *target) {
	target->set_point = default_setpoint + move_setpoint;
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <setPoint+0x14>)
void setPoint(PID *target) {
 8002f9e:	b510      	push	{r4, lr}
	target->set_point = default_setpoint + move_setpoint;
 8002fa0:	4904      	ldr	r1, [pc, #16]	; (8002fb4 <setPoint+0x18>)
void setPoint(PID *target) {
 8002fa2:	4604      	mov	r4, r0
	target->set_point = default_setpoint + move_setpoint;
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	f7fd fd99 	bl	8000adc <__aeabi_fsub>
 8002faa:	61e0      	str	r0, [r4, #28]
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000058 	.word	0x20000058
 8002fb4:	3d25e354 	.word	0x3d25e354

08002fb8 <update>:
}

float update(PID *target,float current_Val) {
 8002fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fbc:	4604      	mov	r4, r0
	target->error = target->set_point - current_Val;
 8002fbe:	69c0      	ldr	r0, [r0, #28]
 8002fc0:	f7fd fd8c 	bl	8000adc <__aeabi_fsub>

	float P_Val = (target->Kp)* target->error;
 8002fc4:	6821      	ldr	r1, [r4, #0]
	target->error = target->set_point - current_Val;
 8002fc6:	6220      	str	r0, [r4, #32]
 8002fc8:	4605      	mov	r5, r0
	float P_Val = (target->Kp)* target->error;
 8002fca:	f7fd fe91 	bl	8000cf0 <__aeabi_fmul>
	float D_Val = target->Kd * (target->error - target->Derivator);
 8002fce:	68e1      	ldr	r1, [r4, #12]
	float P_Val = (target->Kp)* target->error;
 8002fd0:	4681      	mov	r9, r0
	float D_Val = target->Kd * (target->error - target->Derivator);
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f7fd fd82 	bl	8000adc <__aeabi_fsub>
 8002fd8:	68a1      	ldr	r1, [r4, #8]
 8002fda:	f7fd fe89 	bl	8000cf0 <__aeabi_fmul>
	target->Derivator = target->error;

	if (target->Integrator > target->Integrator_max)
 8002fde:	6927      	ldr	r7, [r4, #16]
 8002fe0:	6966      	ldr	r6, [r4, #20]
	float D_Val = target->Kd * (target->error - target->Derivator);
 8002fe2:	4680      	mov	r8, r0
	target->Derivator = target->error;
 8002fe4:	60e5      	str	r5, [r4, #12]
	if (target->Integrator > target->Integrator_max)
 8002fe6:	4631      	mov	r1, r6
 8002fe8:	4638      	mov	r0, r7
 8002fea:	f7fe f83d 	bl	8001068 <__aeabi_fcmpgt>
 8002fee:	b108      	cbz	r0, 8002ff4 <update+0x3c>
		target->Integrator = target->Integrator_max;
	else if (target->Integrator < target->Integrator_min)
		target->Integrator = target->Integrator_min;
 8002ff0:	6126      	str	r6, [r4, #16]
 8002ff2:	e006      	b.n	8003002 <update+0x4a>
	else if (target->Integrator < target->Integrator_min)
 8002ff4:	69a6      	ldr	r6, [r4, #24]
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	f7fe f817 	bl	800102c <__aeabi_fcmplt>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	d1f6      	bne.n	8002ff0 <update+0x38>

	float I_Val = target->Integrator * target->Ki;
 8003002:	6926      	ldr	r6, [r4, #16]
 8003004:	6861      	ldr	r1, [r4, #4]
 8003006:	4630      	mov	r0, r6
 8003008:	f7fd fe72 	bl	8000cf0 <__aeabi_fmul>

	//float PID_Val = P_Val + I_Val + D_Val;

	target->Integrator = target->Integrator + (target->error);
 800300c:	4631      	mov	r1, r6
	float I_Val = target->Integrator * target->Ki;
 800300e:	4607      	mov	r7, r0
	target->Integrator = target->Integrator + (target->error);
 8003010:	4628      	mov	r0, r5
 8003012:	f7fd fd65 	bl	8000ae0 <__addsf3>

	//sprintf(std,"P_Val: %.2f,	I_Val: %.2f,	D_Val: %.2f,	error:%.2f \r\n",P_Val,I_Val,D_Val,target->error);
	//HAL_UART_Transmit(&huart1, std, strlen(std), 20);
	return P_Val + I_Val + D_Val;
 8003016:	4639      	mov	r1, r7
	target->Integrator = target->Integrator + (target->error);
 8003018:	6120      	str	r0, [r4, #16]
	return P_Val + I_Val + D_Val;
 800301a:	4648      	mov	r0, r9
 800301c:	f7fd fd60 	bl	8000ae0 <__addsf3>
 8003020:	4641      	mov	r1, r8
 8003022:	f7fd fd5d 	bl	8000ae0 <__addsf3>
}
 8003026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800302c <MotorInit>:
	target->set_point = default_setpoint;
	target->error = 0;
}


void MotorInit(){
 800302c:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800302e:	4c05      	ldr	r4, [pc, #20]	; (8003044 <MotorInit+0x18>)
 8003030:	2104      	movs	r1, #4
 8003032:	4620      	mov	r0, r4
 8003034:	f7ff fbbc 	bl	80027b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8003038:	4620      	mov	r0, r4
}
 800303a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800303e:	2100      	movs	r1, #0
 8003040:	f7ff bbb6 	b.w	80027b0 <HAL_TIM_PWM_Start>
 8003044:	20000290 	.word	0x20000290

08003048 <MotorStop>:
void MotorStop(){

	GPIOB->BRR = GPIO_PIN_0;
	GPIOB->BRR = GPIO_PIN_1;
 8003048:	2202      	movs	r2, #2
	GPIOB->BRR = GPIO_PIN_0;
 800304a:	2101      	movs	r1, #1
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <MotorStop+0x20>)
 800304e:	6159      	str	r1, [r3, #20]
	GPIOB->BRR = GPIO_PIN_1;
 8003050:	615a      	str	r2, [r3, #20]

	GPIOC->BRR = GPIO_PIN_0;
 8003052:	f8c3 1414 	str.w	r1, [r3, #1044]	; 0x414
	GPIOC->BRR = GPIO_PIN_1;
 8003056:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	TIM3->CCR1 = 0;
 800305a:	2200      	movs	r2, #0
 800305c:	f5a3 3384 	sub.w	r3, r3, #67584	; 0x10800
 8003060:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40010c00 	.word	0x40010c00
 800306c:	00000000 	.word	0x00000000

08003070 <MotorBackward>:
}
void MotorBackward(float speed){
 8003070:	b538      	push	{r3, r4, r5, lr}
	if(speed>=1000)
 8003072:	491f      	ldr	r1, [pc, #124]	; (80030f0 <MotorBackward+0x80>)
void MotorBackward(float speed){
 8003074:	4605      	mov	r5, r0
	if(speed>=1000)
 8003076:	f7fd ffed 	bl	8001054 <__aeabi_fcmpge>
 800307a:	b100      	cbz	r0, 800307e <MotorBackward+0xe>
		speed =1000;
 800307c:	4d1c      	ldr	r5, [pc, #112]	; (80030f0 <MotorBackward+0x80>)

	if(TURN_flag==-1){
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <MotorBackward+0x84>)
		TIM3->CCR1 = (int)speed;
 8003080:	4628      	mov	r0, r5
	if(TURN_flag==-1){
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4c1c      	ldr	r4, [pc, #112]	; (80030f8 <MotorBackward+0x88>)
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	d10d      	bne.n	80030a6 <MotorBackward+0x36>
		TIM3->CCR1 = (int)speed;
 800308a:	f7fd fff7 	bl	800107c <__aeabi_f2iz>
 800308e:	6360      	str	r0, [r4, #52]	; 0x34
		TIM3->CCR2 = (int)speed*0.7;
 8003090:	f7fd f9b0 	bl	80003f4 <__aeabi_i2d>
 8003094:	a314      	add	r3, pc, #80	; (adr r3, 80030e8 <MotorBackward+0x78>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd fa11 	bl	80004c0 <__aeabi_dmul>
 800309e:	f7fd fca9 	bl	80009f4 <__aeabi_d2uiz>
		TIM3->CCR1 = (int)speed*0.7;
		TIM3->CCR2 = (int)speed;
	}
	else{
		TIM3->CCR1 = (int)speed;
		TIM3->CCR2 = (int)speed;
 80030a2:	63a0      	str	r0, [r4, #56]	; 0x38
 80030a4:	e00f      	b.n	80030c6 <MotorBackward+0x56>
	else if(TURN_flag==1){
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d117      	bne.n	80030da <MotorBackward+0x6a>
		TIM3->CCR1 = (int)speed*0.7;
 80030aa:	f7fd ffe7 	bl	800107c <__aeabi_f2iz>
 80030ae:	4605      	mov	r5, r0
 80030b0:	f7fd f9a0 	bl	80003f4 <__aeabi_i2d>
 80030b4:	a30c      	add	r3, pc, #48	; (adr r3, 80030e8 <MotorBackward+0x78>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	f7fd fa01 	bl	80004c0 <__aeabi_dmul>
 80030be:	f7fd fc99 	bl	80009f4 <__aeabi_d2uiz>
 80030c2:	6360      	str	r0, [r4, #52]	; 0x34
		TIM3->CCR2 = (int)speed;
 80030c4:	63a5      	str	r5, [r4, #56]	; 0x38
	}

	GPIOB->BRR = GPIO_PIN_0;
 80030c6:	2201      	movs	r2, #1
	GPIOB->BSRR = GPIO_PIN_1;
 80030c8:	2102      	movs	r1, #2
	GPIOB->BRR = GPIO_PIN_0;
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <MotorBackward+0x8c>)
 80030cc:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = GPIO_PIN_1;
 80030ce:	6119      	str	r1, [r3, #16]

	GPIOC->BSRR = GPIO_PIN_1;
 80030d0:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
	GPIOC->BRR = GPIO_PIN_0;
 80030d4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	GPIOC->BSRR = GPIO_PIN_1;
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
		TIM3->CCR1 = (int)speed;
 80030da:	f7fd ffcf 	bl	800107c <__aeabi_f2iz>
 80030de:	6360      	str	r0, [r4, #52]	; 0x34
 80030e0:	e7df      	b.n	80030a2 <MotorBackward+0x32>
 80030e2:	bf00      	nop
 80030e4:	f3af 8000 	nop.w
 80030e8:	66666666 	.word	0x66666666
 80030ec:	3fe66666 	.word	0x3fe66666
 80030f0:	447a0000 	.word	0x447a0000
 80030f4:	20000044 	.word	0x20000044
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40010c00 	.word	0x40010c00

08003100 <MotorForward>:
}
void MotorForward(float speed){
 8003100:	b538      	push	{r3, r4, r5, lr}
	if(speed>=1000)
 8003102:	491f      	ldr	r1, [pc, #124]	; (8003180 <MotorForward+0x80>)
void MotorForward(float speed){
 8003104:	4605      	mov	r5, r0
	if(speed>=1000)
 8003106:	f7fd ffa5 	bl	8001054 <__aeabi_fcmpge>
 800310a:	b100      	cbz	r0, 800310e <MotorForward+0xe>
		speed =1000;
 800310c:	4d1c      	ldr	r5, [pc, #112]	; (8003180 <MotorForward+0x80>)

	if(TURN_flag==-1){
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <MotorForward+0x84>)
		TIM3->CCR1 = (int)speed*0.7;
 8003110:	4628      	mov	r0, r5
	if(TURN_flag==-1){
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	d118      	bne.n	800314a <MotorForward+0x4a>
		TIM3->CCR1 = (int)speed*0.7;
 8003118:	f7fd ffb0 	bl	800107c <__aeabi_f2iz>
 800311c:	4604      	mov	r4, r0
 800311e:	f7fd f969 	bl	80003f4 <__aeabi_i2d>
 8003122:	a315      	add	r3, pc, #84	; (adr r3, 8003178 <MotorForward+0x78>)
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f7fd f9ca 	bl	80004c0 <__aeabi_dmul>
 800312c:	f7fd fc62 	bl	80009f4 <__aeabi_d2uiz>
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <MotorForward+0x88>)
 8003132:	6358      	str	r0, [r3, #52]	; 0x34
		TIM3->CCR2 = (int)speed;
 8003134:	639c      	str	r4, [r3, #56]	; 0x38
	else{
		TIM3->CCR1 = (int)speed;
		TIM3->CCR2 = (int)speed;
	}

	GPIOB->BSRR = GPIO_PIN_0;
 8003136:	2201      	movs	r2, #1
	GPIOB->BRR = GPIO_PIN_1;
 8003138:	2102      	movs	r1, #2
	GPIOB->BSRR = GPIO_PIN_0;
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <MotorForward+0x8c>)
 800313c:	611a      	str	r2, [r3, #16]
	GPIOB->BRR = GPIO_PIN_1;
 800313e:	6159      	str	r1, [r3, #20]

	GPIOC->BRR = GPIO_PIN_1;
 8003140:	f8c3 1414 	str.w	r1, [r3, #1044]	; 0x414
	GPIOC->BSRR = GPIO_PIN_0;
 8003144:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	GPIOC->BRR = GPIO_PIN_1;
 8003148:	bd38      	pop	{r3, r4, r5, pc}
	else if(TURN_flag==1){
 800314a:	2b01      	cmp	r3, #1
 800314c:	4c0e      	ldr	r4, [pc, #56]	; (8003188 <MotorForward+0x88>)
 800314e:	d10d      	bne.n	800316c <MotorForward+0x6c>
		TIM3->CCR1 = (int)speed;
 8003150:	f7fd ff94 	bl	800107c <__aeabi_f2iz>
 8003154:	6360      	str	r0, [r4, #52]	; 0x34
		TIM3->CCR2 = (int)speed*0.7;
 8003156:	f7fd f94d 	bl	80003f4 <__aeabi_i2d>
 800315a:	a307      	add	r3, pc, #28	; (adr r3, 8003178 <MotorForward+0x78>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f7fd f9ae 	bl	80004c0 <__aeabi_dmul>
 8003164:	f7fd fc46 	bl	80009f4 <__aeabi_d2uiz>
		TIM3->CCR2 = (int)speed;
 8003168:	63a0      	str	r0, [r4, #56]	; 0x38
 800316a:	e7e4      	b.n	8003136 <MotorForward+0x36>
		TIM3->CCR1 = (int)speed;
 800316c:	f7fd ff86 	bl	800107c <__aeabi_f2iz>
 8003170:	6360      	str	r0, [r4, #52]	; 0x34
 8003172:	e7f9      	b.n	8003168 <MotorForward+0x68>
 8003174:	f3af 8000 	nop.w
 8003178:	66666666 	.word	0x66666666
 800317c:	3fe66666 	.word	0x3fe66666
 8003180:	447a0000 	.word	0x447a0000
 8003184:	20000044 	.word	0x20000044
 8003188:	40000400 	.word	0x40000400
 800318c:	40010c00 	.word	0x40010c00

08003190 <HAL_UART_RxCpltCallback>:
		//HAL_TIM_Base_Stop_IT(&htim2);
		//HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_8);
		//HAL_TIM_Base_Start_IT(&htim2);
	}

	if(huart->Instance == USART3)
 8003190:	6802      	ldr	r2, [r0, #0]
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_UART_RxCpltCallback+0x84>)
{
 8003194:	b510      	push	{r4, lr}
	if(huart->Instance == USART3)
 8003196:	429a      	cmp	r2, r3
 8003198:	d13b      	bne.n	8003212 <HAL_UART_RxCpltCallback+0x82>
	{
		//F,B,R,L,S
		switch(uart3_rx[0]){
 800319a:	4c1f      	ldr	r4, [pc, #124]	; (8003218 <HAL_UART_RxCpltCallback+0x88>)
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_UART_RxCpltCallback+0x8c>)
 800319e:	7821      	ldrb	r1, [r4, #0]
 80031a0:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_UART_RxCpltCallback+0x90>)
 80031a2:	294c      	cmp	r1, #76	; 0x4c
 80031a4:	d01b      	beq.n	80031de <HAL_UART_RxCpltCallback+0x4e>
 80031a6:	f04f 0000 	mov.w	r0, #0
 80031aa:	d807      	bhi.n	80031bc <HAL_UART_RxCpltCallback+0x2c>
 80031ac:	2942      	cmp	r1, #66	; 0x42
 80031ae:	d013      	beq.n	80031d8 <HAL_UART_RxCpltCallback+0x48>
 80031b0:	2946      	cmp	r1, #70	; 0x46
 80031b2:	d00c      	beq.n	80031ce <HAL_UART_RxCpltCallback+0x3e>
			first.Derivator=0;
			first.error=0;
			setPoint(&first);
			break;
		default://'S'
			TURN_flag = 0;
 80031b4:	2100      	movs	r1, #0
 80031b6:	6019      	str	r1, [r3, #0]
			move_setpoint=0.0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e00a      	b.n	80031d2 <HAL_UART_RxCpltCallback+0x42>
		switch(uart3_rx[0]){
 80031bc:	294e      	cmp	r1, #78	; 0x4e
 80031be:	d010      	beq.n	80031e2 <HAL_UART_RxCpltCallback+0x52>
 80031c0:	2952      	cmp	r1, #82	; 0x52
 80031c2:	d1f7      	bne.n	80031b4 <HAL_UART_RxCpltCallback+0x24>
			TURN_flag = -1;
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
			TURN_flag = 1;
 80031c8:	6019      	str	r1, [r3, #0]
			move_setpoint = -0.03;
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_UART_RxCpltCallback+0x94>)
 80031cc:	e001      	b.n	80031d2 <HAL_UART_RxCpltCallback+0x42>
			TURN_flag = 0;
 80031ce:	6018      	str	r0, [r3, #0]
			move_setpoint = -0.04;
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <HAL_UART_RxCpltCallback+0x98>)
			move_setpoint=0.0;
 80031d2:	6013      	str	r3, [r2, #0]
			setPoint(&first);
 80031d4:	4815      	ldr	r0, [pc, #84]	; (800322c <HAL_UART_RxCpltCallback+0x9c>)
 80031d6:	e011      	b.n	80031fc <HAL_UART_RxCpltCallback+0x6c>
			TURN_flag = 0;
 80031d8:	6018      	str	r0, [r3, #0]
			move_setpoint = 0.04;
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <HAL_UART_RxCpltCallback+0xa0>)
 80031dc:	e7f9      	b.n	80031d2 <HAL_UART_RxCpltCallback+0x42>
			TURN_flag = 1;
 80031de:	2101      	movs	r1, #1
 80031e0:	e7f2      	b.n	80031c8 <HAL_UART_RxCpltCallback+0x38>
			TURN_flag = 0;
 80031e2:	6018      	str	r0, [r3, #0]
			move_setpoint=0.0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	6013      	str	r3, [r2, #0]
			PIDspeed=0;
 80031e8:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_UART_RxCpltCallback+0xa4>)
			first.Integrator=0;
 80031ea:	4810      	ldr	r0, [pc, #64]	; (800322c <HAL_UART_RxCpltCallback+0x9c>)
			PIDspeed=0;
 80031ec:	6013      	str	r3, [r2, #0]
			CFangleX1=0;
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <HAL_UART_RxCpltCallback+0xa8>)
			first.Integrator=0;
 80031f0:	6103      	str	r3, [r0, #16]
			CFangleX1=0;
 80031f2:	6013      	str	r3, [r2, #0]
			accAngX1=0;
 80031f4:	4a11      	ldr	r2, [pc, #68]	; (800323c <HAL_UART_RxCpltCallback+0xac>)
			first.Derivator=0;
 80031f6:	60c3      	str	r3, [r0, #12]
			accAngX1=0;
 80031f8:	6013      	str	r3, [r2, #0]
			first.error=0;
 80031fa:	6203      	str	r3, [r0, #32]
			setPoint(&first);
 80031fc:	f7ff fece 	bl	8002f9c <setPoint>
			break;
		}

		uart3_rx[0]=0;
 8003200:	2300      	movs	r3, #0
 8003202:	7023      	strb	r3, [r4, #0]

		HAL_UART_Receive_IT(&huart3, (uint8_t*)uart3_rx, 1);
 8003204:	2201      	movs	r2, #1
	}

}
 8003206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart3, (uint8_t*)uart3_rx, 1);
 800320a:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_UART_RxCpltCallback+0x88>)
 800320c:	480c      	ldr	r0, [pc, #48]	; (8003240 <HAL_UART_RxCpltCallback+0xb0>)
 800320e:	f7ff bbe3 	b.w	80029d8 <HAL_UART_Receive_IT>
 8003212:	bd10      	pop	{r4, pc}
 8003214:	40004800 	.word	0x40004800
 8003218:	20000200 	.word	0x20000200
 800321c:	20000044 	.word	0x20000044
 8003220:	20000058 	.word	0x20000058
 8003224:	bcf5c28f 	.word	0xbcf5c28f
 8003228:	bd23d70a 	.word	0xbd23d70a
 800322c:	20000268 	.word	0x20000268
 8003230:	3d23d70a 	.word	0x3d23d70a
 8003234:	20000040 	.word	0x20000040
 8003238:	2000003c 	.word	0x2000003c
 800323c:	20000048 	.word	0x20000048
 8003240:	20000310 	.word	0x20000310
 8003244:	00000000 	.word	0x00000000

08003248 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(htim ->Instance == TIM2)//10ms
 800324c:	6803      	ldr	r3, [r0, #0]
{
 800324e:	b087      	sub	sp, #28
	if(htim ->Instance == TIM2)//10ms
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003254:	f040 80de 	bne.w	8003414 <HAL_TIM_PeriodElapsedCallback+0x1cc>
	{
		GPIOB->ODR ^= GPIO_PIN_9; //�넗湲�
 8003258:	4a75      	ldr	r2, [pc, #468]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e8>)

		MPU6050_GetData(&ax,&ay,&az,&gx,&gy,&gz,&tmpr);
 800325a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8003478 <HAL_TIM_PeriodElapsedCallback+0x230>
		GPIOB->ODR ^= GPIO_PIN_9; //�넗湲�
 800325e:	68d3      	ldr	r3, [r2, #12]
		MPU6050_GetData(&ax,&ay,&az,&gx,&gy,&gz,&tmpr);
 8003260:	4d74      	ldr	r5, [pc, #464]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
		GPIOB->ODR ^= GPIO_PIN_9; //�넗湲�
 8003262:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8003266:	60d3      	str	r3, [r2, #12]
		MPU6050_GetData(&ax,&ay,&az,&gx,&gy,&gz,&tmpr);
 8003268:	4e73      	ldr	r6, [pc, #460]	; (8003438 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800326a:	4c74      	ldr	r4, [pc, #464]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800326c:	4f74      	ldr	r7, [pc, #464]	; (8003440 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800326e:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800347c <HAL_TIM_PeriodElapsedCallback+0x234>
 8003272:	4b74      	ldr	r3, [pc, #464]	; (8003444 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8003274:	462a      	mov	r2, r5
 8003276:	4631      	mov	r1, r6
 8003278:	9302      	str	r3, [sp, #8]
 800327a:	9401      	str	r4, [sp, #4]
 800327c:	4643      	mov	r3, r8
 800327e:	9700      	str	r7, [sp, #0]
 8003280:	4648      	mov	r0, r9
 8003282:	f7ff fd52 	bl	8002d2a <MPU6050_GetData>
		//			sprintf(std,"MPU6050: ax:%d , ay:%d , az:%d , gx:%d , gy:%d , gz:%d , tmpr:%d \r\n",ax,ay,az,gx,gy,gz,tmpr);
		//sprintf(std,"tim is running\n\r");
		//			sprintf(std,"MPU6050: rate_gyroX:%.2f , rate_gyroY:%.2f , rate_gyroZ:%.2f , rate_accX:%.2f , rate_accY:%.2f , rate_accZ:%.2f \r\n",rate_gyroX,rate_gyroY,rate_gyroZ,rate_accX,rate_accY,rate_accZ);
		//			HAL_UART_Transmit(&huart1, std, strlen(std), 200);

		rate_gyroX = (float)gx/ 131.0;
 8003286:	f9b8 0000 	ldrsh.w	r0, [r8]
 800328a:	f7fd fcdd 	bl	8000c48 <__aeabi_i2f>
 800328e:	496e      	ldr	r1, [pc, #440]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003290:	f7fd fde2 	bl	8000e58 <__aeabi_fdiv>
 8003294:	4b6d      	ldr	r3, [pc, #436]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8003296:	9005      	str	r0, [sp, #20]
 8003298:	6018      	str	r0, [r3, #0]
		rate_gyroY = (float)gy/ 131.0;
 800329a:	f9b7 0000 	ldrsh.w	r0, [r7]
 800329e:	f7fd fcd3 	bl	8000c48 <__aeabi_i2f>
 80032a2:	4969      	ldr	r1, [pc, #420]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80032a4:	f7fd fdd8 	bl	8000e58 <__aeabi_fdiv>
 80032a8:	4f69      	ldr	r7, [pc, #420]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80032aa:	9004      	str	r0, [sp, #16]
 80032ac:	6038      	str	r0, [r7, #0]
		rate_gyroZ = (float)gz/ 131.0;
 80032ae:	f9b4 0000 	ldrsh.w	r0, [r4]
 80032b2:	f7fd fcc9 	bl	8000c48 <__aeabi_i2f>
 80032b6:	4964      	ldr	r1, [pc, #400]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80032b8:	f7fd fdce 	bl	8000e58 <__aeabi_fdiv>
		gyroAngleX += rate_gyroX * time_diff ;
 80032bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003480 <HAL_TIM_PeriodElapsedCallback+0x238>
 80032c0:	9a05      	ldr	r2, [sp, #20]
 80032c2:	f8d8 4000 	ldr.w	r4, [r8]
		rate_gyroZ = (float)gz/ 131.0;
 80032c6:	4963      	ldr	r1, [pc, #396]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x20c>)
		gyroAngleX += rate_gyroX * time_diff ;
 80032c8:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 8003484 <HAL_TIM_PeriodElapsedCallback+0x23c>
		rate_gyroZ = (float)gz/ 131.0;
 80032cc:	4683      	mov	fp, r0
 80032ce:	6008      	str	r0, [r1, #0]
		gyroAngleX += rate_gyroX * time_diff ;
 80032d0:	4610      	mov	r0, r2
 80032d2:	4621      	mov	r1, r4
 80032d4:	f7fd fd0c 	bl	8000cf0 <__aeabi_fmul>
 80032d8:	f8da 1000 	ldr.w	r1, [sl]
 80032dc:	f7fd fc00 	bl	8000ae0 <__addsf3>
		gyroAngleY += rate_gyroY * time_diff ;
 80032e0:	9b04      	ldr	r3, [sp, #16]
		gyroAngleX += rate_gyroX * time_diff ;
 80032e2:	f8ca 0000 	str.w	r0, [sl]
		gyroAngleY += rate_gyroY * time_diff ;
 80032e6:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8003488 <HAL_TIM_PeriodElapsedCallback+0x240>
 80032ea:	4618      	mov	r0, r3
 80032ec:	4621      	mov	r1, r4
 80032ee:	f7fd fcff 	bl	8000cf0 <__aeabi_fmul>
 80032f2:	f8da 1000 	ldr.w	r1, [sl]
 80032f6:	f7fd fbf3 	bl	8000ae0 <__addsf3>
 80032fa:	f8ca 0000 	str.w	r0, [sl]
		gyroAngleZ += rate_gyroZ * time_diff ;
 80032fe:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800348c <HAL_TIM_PeriodElapsedCallback+0x244>
 8003302:	4621      	mov	r1, r4
 8003304:	4658      	mov	r0, fp
 8003306:	f7fd fcf3 	bl	8000cf0 <__aeabi_fmul>
 800330a:	f8da 1000 	ldr.w	r1, [sl]
 800330e:	f7fd fbe7 	bl	8000ae0 <__addsf3>
 8003312:	f8ca 0000 	str.w	r0, [sl]

		rate_accX = -(float)ax/16384.0;
 8003316:	f9b9 0000 	ldrsh.w	r0, [r9]
 800331a:	f7fd fc95 	bl	8000c48 <__aeabi_i2f>
 800331e:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8003322:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003326:	f7fd fce3 	bl	8000cf0 <__aeabi_fmul>
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800332c:	4604      	mov	r4, r0
 800332e:	6018      	str	r0, [r3, #0]
		rate_accY = -(float)ay/16384.0;
 8003330:	f9b6 0000 	ldrsh.w	r0, [r6]
 8003334:	f7fd fc88 	bl	8000c48 <__aeabi_i2f>
 8003338:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 800333c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003340:	f7fd fcd6 	bl	8000cf0 <__aeabi_fmul>
 8003344:	4b45      	ldr	r3, [pc, #276]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003346:	6018      	str	r0, [r3, #0]
		rate_accZ = (float)az/16384.0;
 8003348:	f9b5 0000 	ldrsh.w	r0, [r5]
 800334c:	f7fd fc7c 	bl	8000c48 <__aeabi_i2f>
 8003350:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8003354:	f7fd fccc 	bl	8000cf0 <__aeabi_fmul>
 8003358:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800335a:	6018      	str	r0, [r3, #0]

		accAngX1 = atan2(rate_accX, rate_accZ)* RAD_TO_DEG;
 800335c:	f7fd f85c 	bl	8000418 <__aeabi_f2d>
 8003360:	4682      	mov	sl, r0
 8003362:	468b      	mov	fp, r1
 8003364:	4620      	mov	r0, r4
 8003366:	f7fd f857 	bl	8000418 <__aeabi_f2d>
 800336a:	4652      	mov	r2, sl
 800336c:	465b      	mov	r3, fp
 800336e:	f000 fb69 	bl	8003a44 <atan2>
 8003372:	a32b      	add	r3, pc, #172	; (adr r3, 8003420 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fd f8a2 	bl	80004c0 <__aeabi_dmul>
 800337c:	f7fd fb5a 	bl	8000a34 <__aeabi_d2f>
 8003380:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_TIM_PeriodElapsedCallback+0x21c>)
		CFangleX1 =  K * ( CFangleX1 + rate_gyroY*time_diff) + (1 - K) * accAngX1 ;
 8003382:	4c39      	ldr	r4, [pc, #228]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x220>)
		accAngX1 = atan2(rate_accX, rate_accZ)* RAD_TO_DEG;
 8003384:	6018      	str	r0, [r3, #0]
		CFangleX1 =  K * ( CFangleX1 + rate_gyroY*time_diff) + (1 - K) * accAngX1 ;
 8003386:	4b39      	ldr	r3, [pc, #228]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003388:	f8d8 1000 	ldr.w	r1, [r8]
 800338c:	681e      	ldr	r6, [r3, #0]
		accAngX1 = atan2(rate_accX, rate_accZ)* RAD_TO_DEG;
 800338e:	4605      	mov	r5, r0
		CFangleX1 =  K * ( CFangleX1 + rate_gyroY*time_diff) + (1 - K) * accAngX1 ;
 8003390:	6838      	ldr	r0, [r7, #0]
 8003392:	f7fd fcad 	bl	8000cf0 <__aeabi_fmul>
 8003396:	6821      	ldr	r1, [r4, #0]
 8003398:	f7fd fba2 	bl	8000ae0 <__addsf3>
 800339c:	4631      	mov	r1, r6
 800339e:	f7fd fca7 	bl	8000cf0 <__aeabi_fmul>
 80033a2:	4631      	mov	r1, r6
 80033a4:	4607      	mov	r7, r0
 80033a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80033aa:	f7fd fb97 	bl	8000adc <__aeabi_fsub>
 80033ae:	4629      	mov	r1, r5
 80033b0:	f7fd fc9e 	bl	8000cf0 <__aeabi_fmul>
 80033b4:	4601      	mov	r1, r0
 80033b6:	4638      	mov	r0, r7
 80033b8:	f7fd fb92 	bl	8000ae0 <__addsf3>
 80033bc:	6020      	str	r0, [r4, #0]
		//HAL_UART_Transmit(&huart1, std, strlen(std), 200);
		//sprintf(std,"current Val: %.2f \r\n",CFangleX1);
		//sprintf(std,"accAngX1: %.2f, CFangleX1=%.2f \r\n",accAngX1,CFangleX1);
		//sprintf(std,"accAngX1: %.2f, gyroAngleY=%.2f \r\n",accAngX1,gyroAngleY);
		//HAL_UART_Transmit(&huart1, std, strlen(std), 20);
		PIDspeed = update(&first,CFangleX1*DEG_TO_RAD);
 80033be:	f7fd f82b 	bl	8000418 <__aeabi_f2d>
 80033c2:	a319      	add	r3, pc, #100	; (adr r3, 8003428 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f7fd f87a 	bl	80004c0 <__aeabi_dmul>
 80033cc:	f7fd fb32 	bl	8000a34 <__aeabi_d2f>
 80033d0:	4601      	mov	r1, r0
 80033d2:	4827      	ldr	r0, [pc, #156]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80033d4:	f7ff fdf0 	bl	8002fb8 <update>
 80033d8:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x22c>)

		if(PIDspeed<0){
 80033da:	2100      	movs	r1, #0
		PIDspeed = update(&first,CFangleX1*DEG_TO_RAD);
 80033dc:	6018      	str	r0, [r3, #0]
 80033de:	4604      	mov	r4, r0
		if(PIDspeed<0){
 80033e0:	f7fd fe24 	bl	800102c <__aeabi_fcmplt>
 80033e4:	b130      	cbz	r0, 80033f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
			//HAL_UART_Transmit(&huart1, std, strlen(std), 20);
			MotorBackward(-PIDspeed);
 80033e6:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
			MotorStop();
		}
		//		}
	}

}
 80033ea:	b007      	add	sp, #28
 80033ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			MotorBackward(-PIDspeed);
 80033f0:	f7ff be3e 	b.w	8003070 <MotorBackward>
		else if(PIDspeed>0){
 80033f4:	2100      	movs	r1, #0
 80033f6:	4620      	mov	r0, r4
 80033f8:	f7fd fe36 	bl	8001068 <__aeabi_fcmpgt>
 80033fc:	b128      	cbz	r0, 800340a <HAL_TIM_PeriodElapsedCallback+0x1c2>
			MotorForward(PIDspeed);
 80033fe:	4620      	mov	r0, r4
}
 8003400:	b007      	add	sp, #28
 8003402:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			MotorForward(PIDspeed);
 8003406:	f7ff be7b 	b.w	8003100 <MotorForward>
}
 800340a:	b007      	add	sp, #28
 800340c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			MotorStop();
 8003410:	f7ff be1a 	b.w	8003048 <MotorStop>
}
 8003414:	b007      	add	sp, #28
 8003416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	f3af 8000 	nop.w
 8003420:	1e7967cb 	.word	0x1e7967cb
 8003424:	404ca5dc 	.word	0x404ca5dc
 8003428:	00de4c51 	.word	0x00de4c51
 800342c:	3f91df33 	.word	0x3f91df33
 8003430:	40010c00 	.word	0x40010c00
 8003434:	20000196 	.word	0x20000196
 8003438:	2000028e 	.word	0x2000028e
 800343c:	20000264 	.word	0x20000264
 8003440:	20000194 	.word	0x20000194
 8003444:	200001fe 	.word	0x200001fe
 8003448:	43030000 	.word	0x43030000
 800344c:	20000068 	.word	0x20000068
 8003450:	2000006c 	.word	0x2000006c
 8003454:	20000070 	.word	0x20000070
 8003458:	2000005c 	.word	0x2000005c
 800345c:	20000060 	.word	0x20000060
 8003460:	20000064 	.word	0x20000064
 8003464:	20000048 	.word	0x20000048
 8003468:	2000003c 	.word	0x2000003c
 800346c:	20000010 	.word	0x20000010
 8003470:	20000268 	.word	0x20000268
 8003474:	20000040 	.word	0x20000040
 8003478:	2000028c 	.word	0x2000028c
 800347c:	200001fc 	.word	0x200001fc
 8003480:	20000018 	.word	0x20000018
 8003484:	2000004c 	.word	0x2000004c
 8003488:	20000050 	.word	0x20000050
 800348c:	20000054 	.word	0x20000054

08003490 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003490:	b510      	push	{r4, lr}
 8003492:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003494:	2228      	movs	r2, #40	; 0x28
 8003496:	2100      	movs	r1, #0
 8003498:	a806      	add	r0, sp, #24
 800349a:	f000 facb 	bl	8003a34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800349e:	2100      	movs	r1, #0
 80034a0:	2214      	movs	r2, #20
 80034a2:	a801      	add	r0, sp, #4
 80034a4:	f000 fac6 	bl	8003a34 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034ac:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ae:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034b0:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034b2:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80034b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b8:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034ba:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034bc:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80034be:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034c0:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034c2:	f7fe fbef 	bl	8001ca4 <HAL_RCC_OscConfig>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034c6:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034cc:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ce:	2300      	movs	r3, #0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034d0:	4621      	mov	r1, r4
 80034d2:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034d4:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034d6:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034d8:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034da:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034dc:	f7fe fdb0 	bl	8002040 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
}
 80034e0:	b010      	add	sp, #64	; 0x40
 80034e2:	bd10      	pop	{r4, pc}

080034e4 <main>:
{
 80034e4:	b508      	push	{r3, lr}
	HAL_Init();
 80034e6:	f7fd fe13 	bl	8001110 <HAL_Init>
	SystemClock_Config();
 80034ea:	f7ff ffd1 	bl	8003490 <SystemClock_Config>
	MX_GPIO_Init();
 80034ee:	f7ff fca7 	bl	8002e40 <MX_GPIO_Init>
	MX_I2C2_Init();
 80034f2:	f7ff fd01 	bl	8002ef8 <MX_I2C2_Init>
	MX_USART3_UART_Init();
 80034f6:	f000 f9b1 	bl	800385c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80034fa:	f000 f939 	bl	8003770 <MX_TIM3_Init>
	MX_TIM2_Init();
 80034fe:	f000 f8a5 	bl	800364c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8003502:	f000 f98f 	bl	8003824 <MX_USART1_UART_Init>
	MPU6050_Init(0x03);//LPF 42Hz
 8003506:	2003      	movs	r0, #3
 8003508:	f7ff fc64 	bl	8002dd4 <MPU6050_Init>
	MotorInit();
 800350c:	f7ff fd8e 	bl	800302c <MotorInit>
	initPID(&first,P_constant,I_constant,D_constant);
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <main+0x6c>)
	target->Kp = P;
 8003512:	4810      	ldr	r0, [pc, #64]	; (8003554 <main+0x70>)
	initPID(&first,P_constant,I_constant,D_constant);
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <main+0x74>)
	target->Ki = I;
 8003518:	6042      	str	r2, [r0, #4]
	initPID(&first,P_constant,I_constant,D_constant);
 800351a:	681b      	ldr	r3, [r3, #0]
	target->Integrator_max = 100;
 800351c:	4a0f      	ldr	r2, [pc, #60]	; (800355c <main+0x78>)
	target->Kd = D;
 800351e:	6083      	str	r3, [r0, #8]
	target->Integrator = 0;
 8003520:	2300      	movs	r3, #0
	target->Integrator_max = 100;
 8003522:	6142      	str	r2, [r0, #20]
	initPID(&first,P_constant,I_constant,D_constant);
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <main+0x7c>)
	target->Integrator_min = -100;
 8003526:	4a0f      	ldr	r2, [pc, #60]	; (8003564 <main+0x80>)
	target->Kp = P;
 8003528:	6809      	ldr	r1, [r1, #0]
	target->Integrator_min = -100;
 800352a:	6182      	str	r2, [r0, #24]
	target->set_point = default_setpoint;
 800352c:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <main+0x84>)
	target->Kp = P;
 800352e:	6001      	str	r1, [r0, #0]
	target->set_point = default_setpoint;
 8003530:	61c2      	str	r2, [r0, #28]
	target->Integrator = 0;
 8003532:	6103      	str	r3, [r0, #16]
	target->Derivator = 0;
 8003534:	60c3      	str	r3, [r0, #12]
	target->error = 0;
 8003536:	6203      	str	r3, [r0, #32]
	setPoint(&first);
 8003538:	f7ff fd30 	bl	8002f9c <setPoint>
	HAL_TIM_Base_Start_IT(&htim2);
 800353c:	480b      	ldr	r0, [pc, #44]	; (800356c <main+0x88>)
 800353e:	f7fe fec5 	bl	80022cc <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)uart3_rx, 1);
 8003542:	2201      	movs	r2, #1
 8003544:	490a      	ldr	r1, [pc, #40]	; (8003570 <main+0x8c>)
 8003546:	480b      	ldr	r0, [pc, #44]	; (8003574 <main+0x90>)
 8003548:	f7ff fa46 	bl	80029d8 <HAL_UART_Receive_IT>
 800354c:	e7fe      	b.n	800354c <main+0x68>
 800354e:	bf00      	nop
 8003550:	2000000c 	.word	0x2000000c
 8003554:	20000268 	.word	0x20000268
 8003558:	20000008 	.word	0x20000008
 800355c:	42c80000 	.word	0x42c80000
 8003560:	20000014 	.word	0x20000014
 8003564:	c2c80000 	.word	0xc2c80000
 8003568:	bd25e354 	.word	0xbd25e354
 800356c:	200002d0 	.word	0x200002d0
 8003570:	20000200 	.word	0x20000200
 8003574:	20000310 	.word	0x20000310

08003578 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003578:	4770      	bx	lr
	...

0800357c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_MspInit+0x44>)
{
 800357e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003580:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003582:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	619a      	str	r2, [r3, #24]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	f002 0201 	and.w	r2, r2, #1
 8003590:	9200      	str	r2, [sp, #0]
 8003592:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800359a:	61da      	str	r2, [r3, #28]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80035a6:	f7fd fde9 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_MspInit+0x48>)
 80035ac:	6853      	ldr	r3, [r2, #4]
 80035ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80035b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035b6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035b8:	b003      	add	sp, #12
 80035ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40010000 	.word	0x40010000

080035c8 <NMI_Handler>:
 80035c8:	4770      	bx	lr

080035ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ca:	e7fe      	b.n	80035ca <HardFault_Handler>

080035cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035cc:	e7fe      	b.n	80035cc <MemManage_Handler>

080035ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ce:	e7fe      	b.n	80035ce <BusFault_Handler>

080035d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d0:	e7fe      	b.n	80035d0 <UsageFault_Handler>

080035d2 <SVC_Handler>:
 80035d2:	4770      	bx	lr

080035d4 <DebugMon_Handler>:
 80035d4:	4770      	bx	lr

080035d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d6:	4770      	bx	lr

080035d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035d8:	f7fd bdac 	b.w	8001134 <HAL_IncTick>

080035dc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035dc:	4801      	ldr	r0, [pc, #4]	; (80035e4 <TIM2_IRQHandler+0x8>)
 80035de:	f7fe bf3e 	b.w	800245e <HAL_TIM_IRQHandler>
 80035e2:	bf00      	nop
 80035e4:	200002d0 	.word	0x200002d0

080035e8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035e8:	4801      	ldr	r0, [pc, #4]	; (80035f0 <USART1_IRQHandler+0x8>)
 80035ea:	f7ff ba5d 	b.w	8002aa8 <HAL_UART_IRQHandler>
 80035ee:	bf00      	nop
 80035f0:	20000350 	.word	0x20000350

080035f4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035f4:	4801      	ldr	r0, [pc, #4]	; (80035fc <USART3_IRQHandler+0x8>)
 80035f6:	f7ff ba57 	b.w	8002aa8 <HAL_UART_IRQHandler>
 80035fa:	bf00      	nop
 80035fc:	20000310 	.word	0x20000310

08003600 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <SystemInit+0x40>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	4a0d      	ldr	r2, [pc, #52]	; (8003644 <SystemInit+0x44>)
 800360e:	400a      	ands	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003618:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800361c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003624:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800362c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800362e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003632:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003634:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <SystemInit+0x48>)
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	f8ff0000 	.word	0xf8ff0000
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800364c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800364e:	2210      	movs	r2, #16
 8003650:	2100      	movs	r1, #0
 8003652:	a802      	add	r0, sp, #8
 8003654:	f000 f9ee 	bl	8003a34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 720-1;
 8003658:	f240 22cf 	movw	r2, #719	; 0x2cf
 800365c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8003660:	4813      	ldr	r0, [pc, #76]	; (80036b0 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003662:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 720-1;
 8003664:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
 8003668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003670:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 8003672:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003674:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003676:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003678:	f7fe ffcc 	bl	8002614 <HAL_TIM_Base_Init>
 800367c:	b108      	cbz	r0, 8003682 <MX_TIM2_Init+0x36>
  {
    Error_Handler();
 800367e:	f7ff ff7b 	bl	8003578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003686:	a902      	add	r1, sp, #8
 8003688:	4809      	ldr	r0, [pc, #36]	; (80036b0 <MX_TIM2_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800368a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800368c:	f7fe fe2a 	bl	80022e4 <HAL_TIM_ConfigClockSource>
 8003690:	b108      	cbz	r0, 8003696 <MX_TIM2_Init+0x4a>
  {
    Error_Handler();
 8003692:	f7ff ff71 	bl	8003578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003696:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003698:	4669      	mov	r1, sp
 800369a:	4805      	ldr	r0, [pc, #20]	; (80036b0 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800369c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036a0:	f7ff f89c 	bl	80027dc <HAL_TIMEx_MasterConfigSynchronization>
 80036a4:	b108      	cbz	r0, 80036aa <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80036a6:	f7ff ff67 	bl	8003578 <Error_Handler>
  }

}
 80036aa:	b007      	add	sp, #28
 80036ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80036b0:	200002d0 	.word	0x200002d0

080036b4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80036b4:	6803      	ldr	r3, [r0, #0]
{
 80036b6:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d115      	bne.n	80036ea <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80036c2:	69da      	ldr	r2, [r3, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80036c4:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	61da      	str	r2, [r3, #28]
 80036cc:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80036ce:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80036d6:	2101      	movs	r1, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036d8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80036da:	f7fd fd61 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036de:	201c      	movs	r0, #28
 80036e0:	f7fd fd92 	bl	8001208 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036e4:	b003      	add	sp, #12
 80036e6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 80036ea:	4a07      	ldr	r2, [pc, #28]	; (8003708 <HAL_TIM_Base_MspInit+0x54>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d1f9      	bne.n	80036e4 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_TIM_Base_MspInit+0x58>)
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	f042 0202 	orr.w	r2, r2, #2
 80036f8:	61da      	str	r2, [r3, #28]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	9b01      	ldr	r3, [sp, #4]
}
 8003704:	e7ee      	b.n	80036e4 <HAL_TIM_Base_MspInit+0x30>
 8003706:	bf00      	nop
 8003708:	40000400 	.word	0x40000400
 800370c:	40021000 	.word	0x40021000

08003710 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003710:	b510      	push	{r4, lr}
 8003712:	4604      	mov	r4, r0
 8003714:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003716:	2210      	movs	r2, #16
 8003718:	2100      	movs	r1, #0
 800371a:	a802      	add	r0, sp, #8
 800371c:	f000 f98a 	bl	8003a34 <memset>
  if(timHandle->Instance==TIM3)
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_TIM_MspPostInit+0x54>)
 8003724:	429a      	cmp	r2, r3
 8003726:	d11a      	bne.n	800375e <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003728:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800372c:	699a      	ldr	r2, [r3, #24]
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003730:	f042 0210 	orr.w	r2, r2, #16
 8003734:	619a      	str	r2, [r3, #24]
 8003736:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003738:	480b      	ldr	r0, [pc, #44]	; (8003768 <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003742:	23c0      	movs	r3, #192	; 0xc0
 8003744:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374c:	f7fd fdc6 	bl	80012dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003750:	4a06      	ldr	r2, [pc, #24]	; (800376c <HAL_TIM_MspPostInit+0x5c>)
 8003752:	6853      	ldr	r3, [r2, #4]
 8003754:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003758:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800375c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800375e:	b006      	add	sp, #24
 8003760:	bd10      	pop	{r4, pc}
 8003762:	bf00      	nop
 8003764:	40000400 	.word	0x40000400
 8003768:	40011000 	.word	0x40011000
 800376c:	40010000 	.word	0x40010000

08003770 <MX_TIM3_Init>:
{
 8003770:	b510      	push	{r4, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003774:	2210      	movs	r2, #16
 8003776:	2100      	movs	r1, #0
 8003778:	a803      	add	r0, sp, #12
 800377a:	f000 f95b 	bl	8003a34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377e:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003780:	221c      	movs	r2, #28
 8003782:	4621      	mov	r1, r4
 8003784:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003788:	9401      	str	r4, [sp, #4]
 800378a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800378c:	f000 f952 	bl	8003a34 <memset>
  htim3.Init.Prescaler = 1111;
 8003790:	f240 4357 	movw	r3, #1111	; 0x457
  htim3.Instance = TIM3;
 8003794:	4821      	ldr	r0, [pc, #132]	; (800381c <MX_TIM3_Init+0xac>)
  htim3.Init.Prescaler = 1111;
 8003796:	4a22      	ldr	r2, [pc, #136]	; (8003820 <MX_TIM3_Init+0xb0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003798:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 1111;
 800379a:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 1000-1;
 800379e:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a2:	6104      	str	r4, [r0, #16]
  htim3.Init.Period = 1000-1;
 80037a4:	60c3      	str	r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037a8:	f7fe ff34 	bl	8002614 <HAL_TIM_Base_Init>
 80037ac:	b108      	cbz	r0, 80037b2 <MX_TIM3_Init+0x42>
    Error_Handler();
 80037ae:	f7ff fee3 	bl	8003578 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037b6:	a903      	add	r1, sp, #12
 80037b8:	4818      	ldr	r0, [pc, #96]	; (800381c <MX_TIM3_Init+0xac>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ba:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037bc:	f7fe fd92 	bl	80022e4 <HAL_TIM_ConfigClockSource>
 80037c0:	b108      	cbz	r0, 80037c6 <MX_TIM3_Init+0x56>
    Error_Handler();
 80037c2:	f7ff fed9 	bl	8003578 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80037c6:	4815      	ldr	r0, [pc, #84]	; (800381c <MX_TIM3_Init+0xac>)
 80037c8:	f7fe ff3e 	bl	8002648 <HAL_TIM_PWM_Init>
 80037cc:	b108      	cbz	r0, 80037d2 <MX_TIM3_Init+0x62>
    Error_Handler();
 80037ce:	f7ff fed3 	bl	8003578 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d2:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037d4:	a901      	add	r1, sp, #4
 80037d6:	4811      	ldr	r0, [pc, #68]	; (800381c <MX_TIM3_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d8:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037da:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037dc:	f7fe fffe 	bl	80027dc <HAL_TIMEx_MasterConfigSynchronization>
 80037e0:	b108      	cbz	r0, 80037e6 <MX_TIM3_Init+0x76>
    Error_Handler();
 80037e2:	f7ff fec9 	bl	8003578 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037e6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037e8:	2200      	movs	r2, #0
 80037ea:	a907      	add	r1, sp, #28
 80037ec:	480b      	ldr	r0, [pc, #44]	; (800381c <MX_TIM3_Init+0xac>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ee:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80037f0:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037f2:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037f4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037f6:	f7fe ff6d 	bl	80026d4 <HAL_TIM_PWM_ConfigChannel>
 80037fa:	b108      	cbz	r0, 8003800 <MX_TIM3_Init+0x90>
    Error_Handler();
 80037fc:	f7ff febc 	bl	8003578 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003800:	2204      	movs	r2, #4
 8003802:	a907      	add	r1, sp, #28
 8003804:	4805      	ldr	r0, [pc, #20]	; (800381c <MX_TIM3_Init+0xac>)
 8003806:	f7fe ff65 	bl	80026d4 <HAL_TIM_PWM_ConfigChannel>
 800380a:	b108      	cbz	r0, 8003810 <MX_TIM3_Init+0xa0>
    Error_Handler();
 800380c:	f7ff feb4 	bl	8003578 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <MX_TIM3_Init+0xac>)
 8003812:	f7ff ff7d 	bl	8003710 <HAL_TIM_MspPostInit>
}
 8003816:	b00e      	add	sp, #56	; 0x38
 8003818:	bd10      	pop	{r4, pc}
 800381a:	bf00      	nop
 800381c:	20000290 	.word	0x20000290
 8003820:	40000400 	.word	0x40000400

08003824 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003824:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003826:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 800382a:	480a      	ldr	r0, [pc, #40]	; (8003854 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800382e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8003830:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003834:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003836:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003838:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800383a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800383c:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800383e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003840:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003842:	f7ff f89b 	bl	800297c <HAL_UART_Init>
 8003846:	b118      	cbz	r0, 8003850 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800384c:	f7ff be94 	b.w	8003578 <Error_Handler>
 8003850:	bd08      	pop	{r3, pc}
 8003852:	bf00      	nop
 8003854:	20000350 	.word	0x20000350
 8003858:	40013800 	.word	0x40013800

0800385c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800385c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
 800385e:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart3.Instance = USART3;
 8003862:	480a      	ldr	r0, [pc, #40]	; (800388c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 9600;
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003866:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 9600;
 8003868:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800386c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800386e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003870:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003872:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003874:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003876:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003878:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800387a:	f7ff f87f 	bl	800297c <HAL_UART_Init>
 800387e:	b118      	cbz	r0, 8003888 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003884:	f7ff be78 	b.w	8003578 <Error_Handler>
 8003888:	bd08      	pop	{r3, pc}
 800388a:	bf00      	nop
 800388c:	20000310 	.word	0x20000310
 8003890:	40004800 	.word	0x40004800

08003894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003894:	2210      	movs	r2, #16
{
 8003896:	b530      	push	{r4, r5, lr}
 8003898:	4604      	mov	r4, r0
 800389a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	eb0d 0002 	add.w	r0, sp, r2
 80038a0:	2100      	movs	r1, #0
 80038a2:	f000 f8c7 	bl	8003a34 <memset>
  if(uartHandle->Instance==USART1)
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	4a37      	ldr	r2, [pc, #220]	; (8003988 <HAL_UART_MspInit+0xf4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d131      	bne.n	8003912 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_UART_MspInit+0xf8>)
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2402      	movs	r4, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 80038b2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b4:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80038b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ba:	619a      	str	r2, [r3, #24]
 80038bc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	4834      	ldr	r0, [pc, #208]	; (8003990 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80038c0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80038c4:	9200      	str	r2, [sp, #0]
 80038c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	f042 0204 	orr.w	r2, r2, #4
 80038ce:	619a      	str	r2, [r3, #24]
 80038d0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038e2:	2303      	movs	r3, #3
 80038e4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e6:	f7fd fcf9 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038f0:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f2:	a904      	add	r1, sp, #16
 80038f4:	4826      	ldr	r0, [pc, #152]	; (8003990 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fa:	f7fd fcef 	bl	80012dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 1);
 80038fe:	2025      	movs	r0, #37	; 0x25
 8003900:	2201      	movs	r2, #1
 8003902:	4621      	mov	r1, r4
 8003904:	f7fd fc4c 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003908:	2025      	movs	r0, #37	; 0x25

    __HAL_AFIO_REMAP_USART3_PARTIAL();

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800390a:	f7fd fc7d 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800390e:	b009      	add	sp, #36	; 0x24
 8003910:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==USART3)
 8003912:	4a20      	ldr	r2, [pc, #128]	; (8003994 <HAL_UART_MspInit+0x100>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d1fa      	bne.n	800390e <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003918:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_UART_MspInit+0xf8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391a:	2502      	movs	r5, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 800391c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391e:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003920:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003924:	61da      	str	r2, [r3, #28]
 8003926:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003928:	481b      	ldr	r0, [pc, #108]	; (8003998 <HAL_UART_MspInit+0x104>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800392a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800392e:	9202      	str	r2, [sp, #8]
 8003930:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003932:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003934:	2400      	movs	r4, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003936:	f042 0210 	orr.w	r2, r2, #16
 800393a:	619a      	str	r2, [r3, #24]
 800393c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	9303      	str	r3, [sp, #12]
 8003946:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800394e:	2303      	movs	r3, #3
 8003950:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003952:	f7fd fcc3 	bl	80012dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003956:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395a:	a904      	add	r1, sp, #16
 800395c:	480e      	ldr	r0, [pc, #56]	; (8003998 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800395e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003960:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003964:	f7fd fcba 	bl	80012dc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003968:	4a0c      	ldr	r2, [pc, #48]	; (800399c <HAL_UART_MspInit+0x108>)
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 800396a:	2027      	movs	r0, #39	; 0x27
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800396c:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 800396e:	4629      	mov	r1, r5
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003970:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003974:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003978:	f043 0310 	orr.w	r3, r3, #16
 800397c:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 800397e:	4622      	mov	r2, r4
 8003980:	f7fd fc0e 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003984:	2027      	movs	r0, #39	; 0x27
 8003986:	e7c0      	b.n	800390a <HAL_UART_MspInit+0x76>
 8003988:	40013800 	.word	0x40013800
 800398c:	40021000 	.word	0x40021000
 8003990:	40010800 	.word	0x40010800
 8003994:	40004800 	.word	0x40004800
 8003998:	40011000 	.word	0x40011000
 800399c:	40010000 	.word	0x40010000

080039a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80039a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80039a2:	e003      	b.n	80039ac <LoopCopyDataInit>

080039a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80039a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80039a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80039aa:	3104      	adds	r1, #4

080039ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80039ac:	480a      	ldr	r0, [pc, #40]	; (80039d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80039b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80039b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80039b4:	d3f6      	bcc.n	80039a4 <CopyDataInit>
  ldr r2, =_sbss
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80039b8:	e002      	b.n	80039c0 <LoopFillZerobss>

080039ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80039ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80039bc:	f842 3b04 	str.w	r3, [r2], #4

080039c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80039c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80039c4:	d3f9      	bcc.n	80039ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039c6:	f7ff fe1b 	bl	8003600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ca:	f000 f80f 	bl	80039ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039ce:	f7ff fd89 	bl	80034e4 <main>
  bx lr
 80039d2:	4770      	bx	lr
  ldr r3, =_sidata
 80039d4:	08003fb8 	.word	0x08003fb8
  ldr r0, =_sdata
 80039d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80039dc:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 80039e0:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 80039e4:	20000390 	.word	0x20000390

080039e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039e8:	e7fe      	b.n	80039e8 <ADC1_2_IRQHandler>
	...

080039ec <__libc_init_array>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	2500      	movs	r5, #0
 80039f0:	4e0c      	ldr	r6, [pc, #48]	; (8003a24 <__libc_init_array+0x38>)
 80039f2:	4c0d      	ldr	r4, [pc, #52]	; (8003a28 <__libc_init_array+0x3c>)
 80039f4:	1ba4      	subs	r4, r4, r6
 80039f6:	10a4      	asrs	r4, r4, #2
 80039f8:	42a5      	cmp	r5, r4
 80039fa:	d109      	bne.n	8003a10 <__libc_init_array+0x24>
 80039fc:	f000 fa96 	bl	8003f2c <_init>
 8003a00:	2500      	movs	r5, #0
 8003a02:	4e0a      	ldr	r6, [pc, #40]	; (8003a2c <__libc_init_array+0x40>)
 8003a04:	4c0a      	ldr	r4, [pc, #40]	; (8003a30 <__libc_init_array+0x44>)
 8003a06:	1ba4      	subs	r4, r4, r6
 8003a08:	10a4      	asrs	r4, r4, #2
 8003a0a:	42a5      	cmp	r5, r4
 8003a0c:	d105      	bne.n	8003a1a <__libc_init_array+0x2e>
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a14:	4798      	blx	r3
 8003a16:	3501      	adds	r5, #1
 8003a18:	e7ee      	b.n	80039f8 <__libc_init_array+0xc>
 8003a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a1e:	4798      	blx	r3
 8003a20:	3501      	adds	r5, #1
 8003a22:	e7f2      	b.n	8003a0a <__libc_init_array+0x1e>
 8003a24:	08003fb0 	.word	0x08003fb0
 8003a28:	08003fb0 	.word	0x08003fb0
 8003a2c:	08003fb0 	.word	0x08003fb0
 8003a30:	08003fb4 	.word	0x08003fb4

08003a34 <memset>:
 8003a34:	4603      	mov	r3, r0
 8003a36:	4402      	add	r2, r0
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <memset+0xa>
 8003a3c:	4770      	bx	lr
 8003a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a42:	e7f9      	b.n	8003a38 <memset+0x4>

08003a44 <atan2>:
 8003a44:	f000 b800 	b.w	8003a48 <__ieee754_atan2>

08003a48 <__ieee754_atan2>:
 8003a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	4256      	negs	r6, r2
 8003a4e:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8003a52:	4316      	orrs	r6, r2
 8003a54:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8003bf8 <__ieee754_atan2+0x1b0>
 8003a58:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 8003a5c:	454e      	cmp	r6, r9
 8003a5e:	4604      	mov	r4, r0
 8003a60:	460d      	mov	r5, r1
 8003a62:	4688      	mov	r8, r1
 8003a64:	d807      	bhi.n	8003a76 <__ieee754_atan2+0x2e>
 8003a66:	4246      	negs	r6, r0
 8003a68:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003a6c:	4306      	orrs	r6, r0
 8003a6e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8003a72:	454e      	cmp	r6, r9
 8003a74:	d906      	bls.n	8003a84 <__ieee754_atan2+0x3c>
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f7fc fb6f 	bl	800015c <__adddf3>
 8003a7e:	4604      	mov	r4, r0
 8003a80:	460d      	mov	r5, r1
 8003a82:	e015      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003a84:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8003a88:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003a8c:	4316      	orrs	r6, r2
 8003a8e:	d103      	bne.n	8003a98 <__ieee754_atan2+0x50>
 8003a90:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a94:	f000 b8b4 	b.w	8003c00 <atan>
 8003a98:	179e      	asrs	r6, r3, #30
 8003a9a:	f006 0602 	and.w	r6, r6, #2
 8003a9e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8003aa2:	ea50 0107 	orrs.w	r1, r0, r7
 8003aa6:	d107      	bne.n	8003ab8 <__ieee754_atan2+0x70>
 8003aa8:	2e02      	cmp	r6, #2
 8003aaa:	d030      	beq.n	8003b0e <__ieee754_atan2+0xc6>
 8003aac:	2e03      	cmp	r6, #3
 8003aae:	d032      	beq.n	8003b16 <__ieee754_atan2+0xce>
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab8:	ea52 010e 	orrs.w	r1, r2, lr
 8003abc:	d106      	bne.n	8003acc <__ieee754_atan2+0x84>
 8003abe:	f1b8 0f00 	cmp.w	r8, #0
 8003ac2:	da71      	bge.n	8003ba8 <__ieee754_atan2+0x160>
 8003ac4:	a53a      	add	r5, pc, #232	; (adr r5, 8003bb0 <__ieee754_atan2+0x168>)
 8003ac6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003aca:	e7f1      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003acc:	45ce      	cmp	lr, r9
 8003ace:	d126      	bne.n	8003b1e <__ieee754_atan2+0xd6>
 8003ad0:	4577      	cmp	r7, lr
 8003ad2:	d111      	bne.n	8003af8 <__ieee754_atan2+0xb0>
 8003ad4:	2e02      	cmp	r6, #2
 8003ad6:	d007      	beq.n	8003ae8 <__ieee754_atan2+0xa0>
 8003ad8:	2e03      	cmp	r6, #3
 8003ada:	d009      	beq.n	8003af0 <__ieee754_atan2+0xa8>
 8003adc:	2e01      	cmp	r6, #1
 8003ade:	d15d      	bne.n	8003b9c <__ieee754_atan2+0x154>
 8003ae0:	a535      	add	r5, pc, #212	; (adr r5, 8003bb8 <__ieee754_atan2+0x170>)
 8003ae2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ae6:	e7e3      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003ae8:	a535      	add	r5, pc, #212	; (adr r5, 8003bc0 <__ieee754_atan2+0x178>)
 8003aea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003aee:	e7df      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003af0:	a535      	add	r5, pc, #212	; (adr r5, 8003bc8 <__ieee754_atan2+0x180>)
 8003af2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003af6:	e7db      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003af8:	2e02      	cmp	r6, #2
 8003afa:	d008      	beq.n	8003b0e <__ieee754_atan2+0xc6>
 8003afc:	2e03      	cmp	r6, #3
 8003afe:	d00a      	beq.n	8003b16 <__ieee754_atan2+0xce>
 8003b00:	2e01      	cmp	r6, #1
 8003b02:	f04f 0400 	mov.w	r4, #0
 8003b06:	d14d      	bne.n	8003ba4 <__ieee754_atan2+0x15c>
 8003b08:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8003b0c:	e7d0      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003b0e:	a530      	add	r5, pc, #192	; (adr r5, 8003bd0 <__ieee754_atan2+0x188>)
 8003b10:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003b14:	e7cc      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003b16:	a530      	add	r5, pc, #192	; (adr r5, 8003bd8 <__ieee754_atan2+0x190>)
 8003b18:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003b1c:	e7c8      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003b1e:	454f      	cmp	r7, r9
 8003b20:	d0cd      	beq.n	8003abe <__ieee754_atan2+0x76>
 8003b22:	eba7 070e 	sub.w	r7, r7, lr
 8003b26:	153f      	asrs	r7, r7, #20
 8003b28:	2f3c      	cmp	r7, #60	; 0x3c
 8003b2a:	dc1e      	bgt.n	8003b6a <__ieee754_atan2+0x122>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da01      	bge.n	8003b34 <__ieee754_atan2+0xec>
 8003b30:	373c      	adds	r7, #60	; 0x3c
 8003b32:	db1e      	blt.n	8003b72 <__ieee754_atan2+0x12a>
 8003b34:	4620      	mov	r0, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	f7fc fdec 	bl	8000714 <__aeabi_ddiv>
 8003b3c:	f000 f9f2 	bl	8003f24 <fabs>
 8003b40:	f000 f85e 	bl	8003c00 <atan>
 8003b44:	4604      	mov	r4, r0
 8003b46:	460d      	mov	r5, r1
 8003b48:	2e01      	cmp	r6, #1
 8003b4a:	d015      	beq.n	8003b78 <__ieee754_atan2+0x130>
 8003b4c:	2e02      	cmp	r6, #2
 8003b4e:	d016      	beq.n	8003b7e <__ieee754_atan2+0x136>
 8003b50:	2e00      	cmp	r6, #0
 8003b52:	d0ad      	beq.n	8003ab0 <__ieee754_atan2+0x68>
 8003b54:	a322      	add	r3, pc, #136	; (adr r3, 8003be0 <__ieee754_atan2+0x198>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	f7fc fafb 	bl	8000158 <__aeabi_dsub>
 8003b62:	a31b      	add	r3, pc, #108	; (adr r3, 8003bd0 <__ieee754_atan2+0x188>)
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	e015      	b.n	8003b96 <__ieee754_atan2+0x14e>
 8003b6a:	a51f      	add	r5, pc, #124	; (adr r5, 8003be8 <__ieee754_atan2+0x1a0>)
 8003b6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003b70:	e7ea      	b.n	8003b48 <__ieee754_atan2+0x100>
 8003b72:	2400      	movs	r4, #0
 8003b74:	2500      	movs	r5, #0
 8003b76:	e7e7      	b.n	8003b48 <__ieee754_atan2+0x100>
 8003b78:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003b7c:	e798      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003b7e:	a318      	add	r3, pc, #96	; (adr r3, 8003be0 <__ieee754_atan2+0x198>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7fc fae6 	bl	8000158 <__aeabi_dsub>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	a10f      	add	r1, pc, #60	; (adr r1, 8003bd0 <__ieee754_atan2+0x188>)
 8003b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b96:	f7fc fadf 	bl	8000158 <__aeabi_dsub>
 8003b9a:	e770      	b.n	8003a7e <__ieee754_atan2+0x36>
 8003b9c:	a514      	add	r5, pc, #80	; (adr r5, 8003bf0 <__ieee754_atan2+0x1a8>)
 8003b9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ba2:	e785      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003ba4:	2500      	movs	r5, #0
 8003ba6:	e783      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003ba8:	a50f      	add	r5, pc, #60	; (adr r5, 8003be8 <__ieee754_atan2+0x1a0>)
 8003baa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003bae:	e77f      	b.n	8003ab0 <__ieee754_atan2+0x68>
 8003bb0:	54442d18 	.word	0x54442d18
 8003bb4:	bff921fb 	.word	0xbff921fb
 8003bb8:	54442d18 	.word	0x54442d18
 8003bbc:	bfe921fb 	.word	0xbfe921fb
 8003bc0:	7f3321d2 	.word	0x7f3321d2
 8003bc4:	4002d97c 	.word	0x4002d97c
 8003bc8:	7f3321d2 	.word	0x7f3321d2
 8003bcc:	c002d97c 	.word	0xc002d97c
 8003bd0:	54442d18 	.word	0x54442d18
 8003bd4:	400921fb 	.word	0x400921fb
 8003bd8:	54442d18 	.word	0x54442d18
 8003bdc:	c00921fb 	.word	0xc00921fb
 8003be0:	33145c07 	.word	0x33145c07
 8003be4:	3ca1a626 	.word	0x3ca1a626
 8003be8:	54442d18 	.word	0x54442d18
 8003bec:	3ff921fb 	.word	0x3ff921fb
 8003bf0:	54442d18 	.word	0x54442d18
 8003bf4:	3fe921fb 	.word	0x3fe921fb
 8003bf8:	7ff00000 	.word	0x7ff00000
 8003bfc:	00000000 	.word	0x00000000

08003c00 <atan>:
 8003c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	4bba      	ldr	r3, [pc, #744]	; (8003ef0 <atan+0x2f0>)
 8003c06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003c0a:	429e      	cmp	r6, r3
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	460d      	mov	r5, r1
 8003c10:	468b      	mov	fp, r1
 8003c12:	dd17      	ble.n	8003c44 <atan+0x44>
 8003c14:	4ab7      	ldr	r2, [pc, #732]	; (8003ef4 <atan+0x2f4>)
 8003c16:	4296      	cmp	r6, r2
 8003c18:	dc01      	bgt.n	8003c1e <atan+0x1e>
 8003c1a:	d109      	bne.n	8003c30 <atan+0x30>
 8003c1c:	b140      	cbz	r0, 8003c30 <atan+0x30>
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	4620      	mov	r0, r4
 8003c24:	4629      	mov	r1, r5
 8003c26:	f7fc fa99 	bl	800015c <__adddf3>
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	460d      	mov	r5, r1
 8003c2e:	e005      	b.n	8003c3c <atan+0x3c>
 8003c30:	f1bb 0f00 	cmp.w	fp, #0
 8003c34:	4cb0      	ldr	r4, [pc, #704]	; (8003ef8 <atan+0x2f8>)
 8003c36:	f300 8129 	bgt.w	8003e8c <atan+0x28c>
 8003c3a:	4db0      	ldr	r5, [pc, #704]	; (8003efc <atan+0x2fc>)
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c44:	4bae      	ldr	r3, [pc, #696]	; (8003f00 <atan+0x300>)
 8003c46:	429e      	cmp	r6, r3
 8003c48:	dc11      	bgt.n	8003c6e <atan+0x6e>
 8003c4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003c4e:	429e      	cmp	r6, r3
 8003c50:	dc0a      	bgt.n	8003c68 <atan+0x68>
 8003c52:	a38f      	add	r3, pc, #572	; (adr r3, 8003e90 <atan+0x290>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f7fc fa80 	bl	800015c <__adddf3>
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	4ba9      	ldr	r3, [pc, #676]	; (8003f04 <atan+0x304>)
 8003c60:	f7fc febe 	bl	80009e0 <__aeabi_dcmpgt>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d1e9      	bne.n	8003c3c <atan+0x3c>
 8003c68:	f04f 3aff 	mov.w	sl, #4294967295
 8003c6c:	e027      	b.n	8003cbe <atan+0xbe>
 8003c6e:	f000 f959 	bl	8003f24 <fabs>
 8003c72:	4ba5      	ldr	r3, [pc, #660]	; (8003f08 <atan+0x308>)
 8003c74:	4604      	mov	r4, r0
 8003c76:	429e      	cmp	r6, r3
 8003c78:	460d      	mov	r5, r1
 8003c7a:	f300 80b8 	bgt.w	8003dee <atan+0x1ee>
 8003c7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003c82:	429e      	cmp	r6, r3
 8003c84:	f300 809c 	bgt.w	8003dc0 <atan+0x1c0>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	f7fc fa66 	bl	800015c <__adddf3>
 8003c90:	2200      	movs	r2, #0
 8003c92:	4b9c      	ldr	r3, [pc, #624]	; (8003f04 <atan+0x304>)
 8003c94:	f7fc fa60 	bl	8000158 <__aeabi_dsub>
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	460f      	mov	r7, r1
 8003c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f7fc fa59 	bl	800015c <__adddf3>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4630      	mov	r0, r6
 8003cb0:	4639      	mov	r1, r7
 8003cb2:	f7fc fd2f 	bl	8000714 <__aeabi_ddiv>
 8003cb6:	f04f 0a00 	mov.w	sl, #0
 8003cba:	4604      	mov	r4, r0
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7fc fbfb 	bl	80004c0 <__aeabi_dmul>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4680      	mov	r8, r0
 8003cd0:	4689      	mov	r9, r1
 8003cd2:	f7fc fbf5 	bl	80004c0 <__aeabi_dmul>
 8003cd6:	a370      	add	r3, pc, #448	; (adr r3, 8003e98 <atan+0x298>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	4606      	mov	r6, r0
 8003cde:	460f      	mov	r7, r1
 8003ce0:	f7fc fbee 	bl	80004c0 <__aeabi_dmul>
 8003ce4:	a36e      	add	r3, pc, #440	; (adr r3, 8003ea0 <atan+0x2a0>)
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f7fc fa37 	bl	800015c <__adddf3>
 8003cee:	4632      	mov	r2, r6
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	f7fc fbe5 	bl	80004c0 <__aeabi_dmul>
 8003cf6:	a36c      	add	r3, pc, #432	; (adr r3, 8003ea8 <atan+0x2a8>)
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f7fc fa2e 	bl	800015c <__adddf3>
 8003d00:	4632      	mov	r2, r6
 8003d02:	463b      	mov	r3, r7
 8003d04:	f7fc fbdc 	bl	80004c0 <__aeabi_dmul>
 8003d08:	a369      	add	r3, pc, #420	; (adr r3, 8003eb0 <atan+0x2b0>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fa25 	bl	800015c <__adddf3>
 8003d12:	4632      	mov	r2, r6
 8003d14:	463b      	mov	r3, r7
 8003d16:	f7fc fbd3 	bl	80004c0 <__aeabi_dmul>
 8003d1a:	a367      	add	r3, pc, #412	; (adr r3, 8003eb8 <atan+0x2b8>)
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	f7fc fa1c 	bl	800015c <__adddf3>
 8003d24:	4632      	mov	r2, r6
 8003d26:	463b      	mov	r3, r7
 8003d28:	f7fc fbca 	bl	80004c0 <__aeabi_dmul>
 8003d2c:	a364      	add	r3, pc, #400	; (adr r3, 8003ec0 <atan+0x2c0>)
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	f7fc fa13 	bl	800015c <__adddf3>
 8003d36:	4642      	mov	r2, r8
 8003d38:	464b      	mov	r3, r9
 8003d3a:	f7fc fbc1 	bl	80004c0 <__aeabi_dmul>
 8003d3e:	a362      	add	r3, pc, #392	; (adr r3, 8003ec8 <atan+0x2c8>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	4680      	mov	r8, r0
 8003d46:	4689      	mov	r9, r1
 8003d48:	4630      	mov	r0, r6
 8003d4a:	4639      	mov	r1, r7
 8003d4c:	f7fc fbb8 	bl	80004c0 <__aeabi_dmul>
 8003d50:	a35f      	add	r3, pc, #380	; (adr r3, 8003ed0 <atan+0x2d0>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc f9ff 	bl	8000158 <__aeabi_dsub>
 8003d5a:	4632      	mov	r2, r6
 8003d5c:	463b      	mov	r3, r7
 8003d5e:	f7fc fbaf 	bl	80004c0 <__aeabi_dmul>
 8003d62:	a35d      	add	r3, pc, #372	; (adr r3, 8003ed8 <atan+0x2d8>)
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f7fc f9f6 	bl	8000158 <__aeabi_dsub>
 8003d6c:	4632      	mov	r2, r6
 8003d6e:	463b      	mov	r3, r7
 8003d70:	f7fc fba6 	bl	80004c0 <__aeabi_dmul>
 8003d74:	a35a      	add	r3, pc, #360	; (adr r3, 8003ee0 <atan+0x2e0>)
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f7fc f9ed 	bl	8000158 <__aeabi_dsub>
 8003d7e:	4632      	mov	r2, r6
 8003d80:	463b      	mov	r3, r7
 8003d82:	f7fc fb9d 	bl	80004c0 <__aeabi_dmul>
 8003d86:	a358      	add	r3, pc, #352	; (adr r3, 8003ee8 <atan+0x2e8>)
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f7fc f9e4 	bl	8000158 <__aeabi_dsub>
 8003d90:	4632      	mov	r2, r6
 8003d92:	463b      	mov	r3, r7
 8003d94:	f7fc fb94 	bl	80004c0 <__aeabi_dmul>
 8003d98:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	d14e      	bne.n	8003e40 <atan+0x240>
 8003da2:	4640      	mov	r0, r8
 8003da4:	4649      	mov	r1, r9
 8003da6:	f7fc f9d9 	bl	800015c <__adddf3>
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	f7fc fb87 	bl	80004c0 <__aeabi_dmul>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4620      	mov	r0, r4
 8003db8:	4629      	mov	r1, r5
 8003dba:	f7fc f9cd 	bl	8000158 <__aeabi_dsub>
 8003dbe:	e734      	b.n	8003c2a <atan+0x2a>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <atan+0x304>)
 8003dc4:	f7fc f9c8 	bl	8000158 <__aeabi_dsub>
 8003dc8:	2200      	movs	r2, #0
 8003dca:	4606      	mov	r6, r0
 8003dcc:	460f      	mov	r7, r1
 8003dce:	4b4d      	ldr	r3, [pc, #308]	; (8003f04 <atan+0x304>)
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc f9c2 	bl	800015c <__adddf3>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4630      	mov	r0, r6
 8003dde:	4639      	mov	r1, r7
 8003de0:	f7fc fc98 	bl	8000714 <__aeabi_ddiv>
 8003de4:	f04f 0a01 	mov.w	sl, #1
 8003de8:	4604      	mov	r4, r0
 8003dea:	460d      	mov	r5, r1
 8003dec:	e767      	b.n	8003cbe <atan+0xbe>
 8003dee:	4b47      	ldr	r3, [pc, #284]	; (8003f0c <atan+0x30c>)
 8003df0:	429e      	cmp	r6, r3
 8003df2:	dc1a      	bgt.n	8003e2a <atan+0x22a>
 8003df4:	2200      	movs	r2, #0
 8003df6:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <atan+0x310>)
 8003df8:	f7fc f9ae 	bl	8000158 <__aeabi_dsub>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4606      	mov	r6, r0
 8003e00:	460f      	mov	r7, r1
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <atan+0x310>)
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc fb5a 	bl	80004c0 <__aeabi_dmul>
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <atan+0x304>)
 8003e10:	f7fc f9a4 	bl	800015c <__adddf3>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	f7fc fc7a 	bl	8000714 <__aeabi_ddiv>
 8003e20:	f04f 0a02 	mov.w	sl, #2
 8003e24:	4604      	mov	r4, r0
 8003e26:	460d      	mov	r5, r1
 8003e28:	e749      	b.n	8003cbe <atan+0xbe>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	2000      	movs	r0, #0
 8003e30:	4938      	ldr	r1, [pc, #224]	; (8003f14 <atan+0x314>)
 8003e32:	f7fc fc6f 	bl	8000714 <__aeabi_ddiv>
 8003e36:	f04f 0a03 	mov.w	sl, #3
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	460d      	mov	r5, r1
 8003e3e:	e73e      	b.n	8003cbe <atan+0xbe>
 8003e40:	4640      	mov	r0, r8
 8003e42:	4649      	mov	r1, r9
 8003e44:	f7fc f98a 	bl	800015c <__adddf3>
 8003e48:	4622      	mov	r2, r4
 8003e4a:	462b      	mov	r3, r5
 8003e4c:	f7fc fb38 	bl	80004c0 <__aeabi_dmul>
 8003e50:	4e31      	ldr	r6, [pc, #196]	; (8003f18 <atan+0x318>)
 8003e52:	4b32      	ldr	r3, [pc, #200]	; (8003f1c <atan+0x31c>)
 8003e54:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003e58:	4456      	add	r6, sl
 8003e5a:	449a      	add	sl, r3
 8003e5c:	e9da 2300 	ldrd	r2, r3, [sl]
 8003e60:	f7fc f97a 	bl	8000158 <__aeabi_dsub>
 8003e64:	4622      	mov	r2, r4
 8003e66:	462b      	mov	r3, r5
 8003e68:	f7fc f976 	bl	8000158 <__aeabi_dsub>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003e74:	f7fc f970 	bl	8000158 <__aeabi_dsub>
 8003e78:	f1bb 0f00 	cmp.w	fp, #0
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	460d      	mov	r5, r1
 8003e80:	f6bf aedc 	bge.w	8003c3c <atan+0x3c>
 8003e84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e88:	461d      	mov	r5, r3
 8003e8a:	e6d7      	b.n	8003c3c <atan+0x3c>
 8003e8c:	4d24      	ldr	r5, [pc, #144]	; (8003f20 <atan+0x320>)
 8003e8e:	e6d5      	b.n	8003c3c <atan+0x3c>
 8003e90:	8800759c 	.word	0x8800759c
 8003e94:	7e37e43c 	.word	0x7e37e43c
 8003e98:	e322da11 	.word	0xe322da11
 8003e9c:	3f90ad3a 	.word	0x3f90ad3a
 8003ea0:	24760deb 	.word	0x24760deb
 8003ea4:	3fa97b4b 	.word	0x3fa97b4b
 8003ea8:	a0d03d51 	.word	0xa0d03d51
 8003eac:	3fb10d66 	.word	0x3fb10d66
 8003eb0:	c54c206e 	.word	0xc54c206e
 8003eb4:	3fb745cd 	.word	0x3fb745cd
 8003eb8:	920083ff 	.word	0x920083ff
 8003ebc:	3fc24924 	.word	0x3fc24924
 8003ec0:	5555550d 	.word	0x5555550d
 8003ec4:	3fd55555 	.word	0x3fd55555
 8003ec8:	2c6a6c2f 	.word	0x2c6a6c2f
 8003ecc:	bfa2b444 	.word	0xbfa2b444
 8003ed0:	52defd9a 	.word	0x52defd9a
 8003ed4:	3fadde2d 	.word	0x3fadde2d
 8003ed8:	af749a6d 	.word	0xaf749a6d
 8003edc:	3fb3b0f2 	.word	0x3fb3b0f2
 8003ee0:	fe231671 	.word	0xfe231671
 8003ee4:	3fbc71c6 	.word	0x3fbc71c6
 8003ee8:	9998ebc4 	.word	0x9998ebc4
 8003eec:	3fc99999 	.word	0x3fc99999
 8003ef0:	440fffff 	.word	0x440fffff
 8003ef4:	7ff00000 	.word	0x7ff00000
 8003ef8:	54442d18 	.word	0x54442d18
 8003efc:	bff921fb 	.word	0xbff921fb
 8003f00:	3fdbffff 	.word	0x3fdbffff
 8003f04:	3ff00000 	.word	0x3ff00000
 8003f08:	3ff2ffff 	.word	0x3ff2ffff
 8003f0c:	40037fff 	.word	0x40037fff
 8003f10:	3ff80000 	.word	0x3ff80000
 8003f14:	bff00000 	.word	0xbff00000
 8003f18:	08003f70 	.word	0x08003f70
 8003f1c:	08003f90 	.word	0x08003f90
 8003f20:	3ff921fb 	.word	0x3ff921fb

08003f24 <fabs>:
 8003f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003f28:	4770      	bx	lr
	...

08003f2c <_init>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr

08003f38 <_fini>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr
